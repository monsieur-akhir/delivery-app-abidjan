version: '3.8'

services:
  # Base de donn√©es PostgreSQL
  postgres:
    image: postgres:15
    container_name: livraison_postgres
    environment:
      POSTGRES_DB: livraison_abidjan
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - livraison_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis pour le cache et les sessions
  redis:
    image: redis:7-alpine
    container_name: livraison_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - livraison_network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Keycloak pour l'authentification
  keycloak:
    image: quay.io/keycloak/keycloak:22.0
    container_name: livraison_keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres
      KC_HOSTNAME_STRICT: false
      KC_HTTP_ENABLED: true
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - livraison_network
    command: start-dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # API Backend FastAPI
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: livraison_api
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/livraison_abidjan
      REDIS_URL: redis://redis:6379/0
      KEYCLOAK_URL: http://keycloak:8080
      ENVIRONMENT: development
      DEBUG: true
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - /app/venv
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - livraison_network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Application Web Vue.js
  web:
    build:
      context: ./web
      dockerfile: Dockerfile.dev
    container_name: livraison_web
    environment:
      VITE_API_URL: http://localhost:8000
      VITE_WS_URL: ws://localhost:8000/ws
      VITE_ENVIRONMENT: development
    ports:
      - "5173:5173"
    volumes:
      - ./web:/app
      - /app/node_modules
    depends_on:
      api:
        condition: service_healthy
    networks:
      - livraison_network
    command: npm run dev

  # Nginx pour le reverse proxy (optionnel en dev)
  nginx:
    image: nginx:alpine
    container_name: livraison_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
      - web
    networks:
      - livraison_network

volumes:
  postgres_data:
  redis_data:

networks:
  livraison_network:
    driver: bridge
