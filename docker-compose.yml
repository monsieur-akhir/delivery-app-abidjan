version: '3.8'

# Configuration Docker complète pour le déploiement de Livraison Abidjan
# Cette configuration couvre tous les services nécessaires au fonctionnement de l'application

services:
  # ---- INFRASTRUCTURE ----
  
  # Base de données principale
  postgres:
    image: postgres:15-alpine
    container_name: livraison_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-livraison_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - livraison_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Cache et file de messages
  redis:
    image: redis:7-alpine
    container_name: livraison_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispass}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - livraison_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Authentification et gestion des identités
  keycloak:
    image: quay.io/keycloak/keycloak:22.0
    container_name: livraison_keycloak
    restart: unless-stopped
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-livraison_db}
      KC_DB_USERNAME: ${POSTGRES_USER:-postgres}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      KC_HOSTNAME_STRICT: "false"
      KC_HTTP_ENABLED: "true"
      KC_PROXY: edge
    command: start-dev
    volumes:
      - keycloak_data:/opt/keycloak/data
      - ./keycloak/themes:/opt/keycloak/themes:ro
      - ./keycloak/import:/opt/keycloak/data/import:ro
    ports:
      - "${KEYCLOAK_PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - livraison_network
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # ---- BACKEND SERVICES ----
  
  # API principale
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=${BUILD_ENV:-production}
    image: livraison/api:${TAG:-latest}
    container_name: livraison_api
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-livraison_db}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redispass}@redis:6379/0
      - KEYCLOAK_URL=http://keycloak:8080
      - SECRET_KEY=${SECRET_KEY:-supersecretkey}
      - DEBUG=${DEBUG:-false}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:5173,http://localhost}
      - SENTRY_DSN=${SENTRY_DSN:-}
      - STORAGE_TYPE=${STORAGE_TYPE:-local}
      - STORAGE_PATH=/app/uploads
      - SMS_PROVIDER=${SMS_PROVIDER:-console}
      - SMS_API_KEY=${SMS_API_KEY:-}
      - PAYMENT_PROVIDER=${PAYMENT_PROVIDER:-cinetpay}
      - PAYMENT_API_KEY=${PAYMENT_API_KEY:-}
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
      - MAX_WORKERS=${MAX_WORKERS:-4}
    volumes:
      - api_uploads:/app/uploads
      - api_logs:/app/logs
      - ./backend/config:/app/config:ro
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - livraison_network
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
      restart_policy:
        condition: on-failure
        max_attempts: 3

  # Service de websockets
  websocket:
    build:
      context: ./backend
      dockerfile: Dockerfile.websocket
    image: livraison/websocket:${TAG:-latest}
    container_name: livraison_websocket
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redispass}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-supersecretkey}
      - DEBUG=${DEBUG:-false}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:5173,http://localhost}
    ports:
      - "${WS_PORT:-8001}:8001"
    depends_on:
      - redis
      - api
    networks:
      - livraison_network
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Service de traitement asynchrone
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
    image: livraison/worker:${TAG:-latest}
    container_name: livraison_worker
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-livraison_db}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redispass}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-supersecretkey}
      - DEBUG=${DEBUG:-false}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - SENTRY_DSN=${SENTRY_DSN:-}
      - STORAGE_TYPE=${STORAGE_TYPE:-local}
      - STORAGE_PATH=/app/uploads
      - SMS_PROVIDER=${SMS_PROVIDER:-console}
      - SMS_API_KEY=${SMS_API_KEY:-}
    volumes:
      - api_uploads:/app/uploads
      - api_logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - livraison_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
      replicas: ${WORKER_REPLICAS:-2}

  # ---- FRONTEND SERVICES ----
  
  # Application Web
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=${API_URL:-http://localhost:8000}
        - VITE_WS_URL=${WS_URL:-ws://localhost:8001}
        - VITE_ENV=${ENVIRONMENT:-production}
        - VITE_SENTRY_DSN=${SENTRY_DSN:-}
        - VITE_MAPS_API_KEY=${MAPS_API_KEY:-}
    image: livraison/web:${TAG:-latest}
    container_name: livraison_web
    restart: unless-stopped
    ports:
      - "${WEB_PORT:-5173}:80"
    networks:
      - livraison_network
    depends_on:
      - api
      - websocket
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # ---- REVERSE PROXY ----
  
  # Nginx - Reverse Proxy et Service Statique
  nginx:
    image: nginx:alpine
    container_name: livraison_nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      - web_build:/usr/share/nginx/html/web:ro
      - api_uploads:/usr/share/nginx/html/uploads:ro
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    depends_on:
      - api
      - web
      - websocket
    networks:
      - livraison_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

volumes:
  postgres_data:
    name: livraison_postgres_data
  redis_data:
    name: livraison_redis_data
  keycloak_data:
    name: livraison_keycloak_data
  api_uploads:
    name: livraison_api_uploads
  api_logs:
    name: livraison_api_logs
  nginx_logs:
    name: livraison_nginx_logs
  web_build:
    name: livraison_web_build

networks:
  livraison_network:
    name: livraison_network
    driver: bridge
