{"ast":null,"code":"export var validatePhone = function validatePhone(phone) {\n  var phoneRegex = /^(?:\\+225)?[0-9]{10}$/;\n  return phoneRegex.test(phone.replace(/\\s/g, \"\"));\n};\nexport var validateEmail = function validateEmail(email) {\n  var emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\nexport var validatePassword = function validatePassword(password) {\n  return password.length >= 6;\n};\nexport var validatePostalCode = function validatePostalCode(postalCode) {\n  var postalCodeRegex = /^[0-9]{5}$/;\n  return postalCodeRegex.test(postalCode);\n};\nexport var validateAmount = function validateAmount(amount) {\n  var amountRegex = /^[0-9]+(\\.[0-9]{1,2})?$/;\n  return amountRegex.test(amount) && Number.parseFloat(amount) > 0;\n};\nexport var validateAddress = function validateAddress(address) {\n  return address.trim().length >= 5;\n};\nexport var validateFullName = function validateFullName(fullName) {\n  return fullName.trim().length >= 3 && fullName.includes(\" \");\n};\nexport var validateDescription = function validateDescription(description) {\n  return description.trim().length >= 10;\n};\nexport var validateOTP = function validateOTP(otp) {\n  var otpRegex = /^[0-9]{4,6}$/;\n  return otpRegex.test(otp);\n};","map":{"version":3,"names":["validatePhone","phone","phoneRegex","test","replace","validateEmail","email","emailRegex","validatePassword","password","length","validatePostalCode","postalCode","postalCodeRegex","validateAmount","amount","amountRegex","Number","parseFloat","validateAddress","address","trim","validateFullName","fullName","includes","validateDescription","description","validateOTP","otp","otpRegex"],"sources":["/home/runner/workspace/mobile/utils/validators.ts"],"sourcesContent":["// Valider un numéro de téléphone\nexport const validatePhone = (phone: string): boolean => {\n  // Format pour les numéros ivoiriens (avec ou sans +225)\n  const phoneRegex = /^(?:\\+225)?[0-9]{10}$/\n  return phoneRegex.test(phone.replace(/\\s/g, \"\"))\n}\n\n// Valider une adresse email\nexport const validateEmail = (email: string): boolean => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n  return emailRegex.test(email)\n}\n\n// Valider un mot de passe (au moins 6 caractères)\nexport const validatePassword = (password: string): boolean => {\n  return password.length >= 6\n}\n\n// Valider un code postal\nexport const validatePostalCode = (postalCode: string): boolean => {\n  // Format pour les codes postaux ivoiriens\n  const postalCodeRegex = /^[0-9]{5}$/\n  return postalCodeRegex.test(postalCode)\n}\n\n// Valider un montant\nexport const validateAmount = (amount: string): boolean => {\n  const amountRegex = /^[0-9]+(\\.[0-9]{1,2})?$/\n  return amountRegex.test(amount) && Number.parseFloat(amount) > 0\n}\n\n// Valider une adresse\nexport const validateAddress = (address: string): boolean => {\n  return address.trim().length >= 5\n}\n\n// Valider un nom complet\nexport const validateFullName = (fullName: string): boolean => {\n  return fullName.trim().length >= 3 && fullName.includes(\" \")\n}\n\n// Valider une description\nexport const validateDescription = (description: string): boolean => {\n  return description.trim().length >= 10\n}\n\n// Valider un code OTP\nexport const validateOTP = (otp: string): boolean => {\n  const otpRegex = /^[0-9]{4,6}$/\n  return otpRegex.test(otp)\n}\n"],"mappings":"AACA,OAAO,IAAMA,aAAa,GAAG,SAAhBA,aAAaA,CAAIC,KAAa,EAAc;EAEvD,IAAMC,UAAU,GAAG,uBAAuB;EAC1C,OAAOA,UAAU,CAACC,IAAI,CAACF,KAAK,CAACG,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;AAClD,CAAC;AAGD,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAaA,CAAIC,KAAa,EAAc;EACvD,IAAMC,UAAU,GAAG,4BAA4B;EAC/C,OAAOA,UAAU,CAACJ,IAAI,CAACG,KAAK,CAAC;AAC/B,CAAC;AAGD,OAAO,IAAME,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAIC,QAAgB,EAAc;EAC7D,OAAOA,QAAQ,CAACC,MAAM,IAAI,CAAC;AAC7B,CAAC;AAGD,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAIC,UAAkB,EAAc;EAEjE,IAAMC,eAAe,GAAG,YAAY;EACpC,OAAOA,eAAe,CAACV,IAAI,CAACS,UAAU,CAAC;AACzC,CAAC;AAGD,OAAO,IAAME,cAAc,GAAG,SAAjBA,cAAcA,CAAIC,MAAc,EAAc;EACzD,IAAMC,WAAW,GAAG,yBAAyB;EAC7C,OAAOA,WAAW,CAACb,IAAI,CAACY,MAAM,CAAC,IAAIE,MAAM,CAACC,UAAU,CAACH,MAAM,CAAC,GAAG,CAAC;AAClE,CAAC;AAGD,OAAO,IAAMI,eAAe,GAAG,SAAlBA,eAAeA,CAAIC,OAAe,EAAc;EAC3D,OAAOA,OAAO,CAACC,IAAI,CAAC,CAAC,CAACX,MAAM,IAAI,CAAC;AACnC,CAAC;AAGD,OAAO,IAAMY,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAIC,QAAgB,EAAc;EAC7D,OAAOA,QAAQ,CAACF,IAAI,CAAC,CAAC,CAACX,MAAM,IAAI,CAAC,IAAIa,QAAQ,CAACC,QAAQ,CAAC,GAAG,CAAC;AAC9D,CAAC;AAGD,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAIC,WAAmB,EAAc;EACnE,OAAOA,WAAW,CAACL,IAAI,CAAC,CAAC,CAACX,MAAM,IAAI,EAAE;AACxC,CAAC;AAGD,OAAO,IAAMiB,WAAW,GAAG,SAAdA,WAAWA,CAAIC,GAAW,EAAc;EACnD,IAAMC,QAAQ,GAAG,cAAc;EAC/B,OAAOA,QAAQ,CAAC1B,IAAI,CAACyB,GAAG,CAAC;AAC3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}