{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Provider as PaperProvider } from 'react-native-paper';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as Font from 'expo-font';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { AuthProvider } from \"./contexts/AuthContext\";\nimport { NetworkProvider } from \"./contexts/NetworkContext\";\nimport { NotificationProvider } from \"./contexts/NotificationContext\";\nimport { ThemeProvider } from \"./contexts/ThemeContext\";\nimport { WebSocketProvider } from \"./contexts/WebSocketContext\";\nimport LoginScreen from \"./screens/auth/LoginScreen\";\nimport RegisterScreen from \"./screens/auth/RegisterScreen\";\nimport ForgotPasswordScreen from \"./screens/auth/ForgotPasswordScreen\";\nimport VerifyOTPScreen from \"./screens/auth/VerifyOTPScreen\";\nimport ClientHomeScreen from \"./screens/client/HomeScreen\";\nimport CreateDeliveryScreen from \"./screens/client/CreateDeliveryScreen\";\nimport TrackDeliveryScreen from \"./screens/client/TrackDeliveryScreen\";\nimport CourierHomeScreen from \"./screens/courier/HomeScreen\";\nimport BidScreen from \"./screens/courier/BidScreen\";\nimport CourierTrackDeliveryScreen from \"./screens/courier/CourierTrackDeliveryScreen\";\nimport ProfileScreen from \"./screens/profile/ProfileScreen\";\nimport SettingsScreen from \"./screens/SettingsScreen\";\nimport NotificationsScreen from \"./screens/NotificationsScreen\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nSplashScreen.preventAutoHideAsync();\nexport default function App() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    appIsReady = _useState2[0],\n    setAppIsReady = _useState2[1];\n  useEffect(function () {\n    function prepare() {\n      return _prepare.apply(this, arguments);\n    }\n    function _prepare() {\n      _prepare = _asyncToGenerator(function* () {\n        try {\n          yield Font.loadAsync({\n            'Roboto': require(\"./node_modules/react-native-vector-icons/Fonts/Roboto.ttf\")\n          });\n        } catch (e) {\n          console.warn('Error loading fonts:', e);\n        } finally {\n          setAppIsReady(true);\n        }\n      });\n      return _prepare.apply(this, arguments);\n    }\n    prepare();\n  }, []);\n  useEffect(function () {\n    if (appIsReady) {\n      SplashScreen.hideAsync();\n    }\n  }, [appIsReady]);\n  if (!appIsReady) {\n    return null;\n  }\n  return _jsx(SafeAreaProvider, {\n    children: _jsx(ThemeProvider, {\n      children: _jsx(NetworkProvider, {\n        children: _jsx(AuthProvider, {\n          children: _jsx(NotificationProvider, {\n            children: _jsx(WebSocketProvider, {\n              children: _jsxs(PaperProvider, {\n                children: [_jsx(NavigationContainer, {\n                  children: _jsxs(Stack.Navigator, {\n                    initialRouteName: \"Login\",\n                    screenOptions: {\n                      headerStyle: {\n                        backgroundColor: '#FF6B00'\n                      },\n                      headerTintColor: '#fff',\n                      headerTitleStyle: {\n                        fontWeight: 'bold'\n                      }\n                    },\n                    children: [_jsx(Stack.Screen, {\n                      name: \"Login\",\n                      component: LoginScreen,\n                      options: {\n                        headerShown: false\n                      }\n                    }), _jsx(Stack.Screen, {\n                      name: \"Register\",\n                      component: RegisterScreen,\n                      options: {\n                        title: 'Inscription'\n                      }\n                    }), _jsx(Stack.Screen, {\n                      name: \"ForgotPassword\",\n                      component: ForgotPasswordScreen,\n                      options: {\n                        title: 'Mot de passe oublié'\n                      }\n                    }), _jsx(Stack.Screen, {\n                      name: \"VerifyOTP\",\n                      component: VerifyOTPScreen,\n                      options: {\n                        title: 'Vérification'\n                      }\n                    }), _jsx(Stack.Screen, {\n                      name: \"ClientHome\",\n                      component: ClientHomeScreen,\n                      options: {\n                        title: 'Accueil'\n                      }\n                    }), _jsx(Stack.Screen, {\n                      name: \"CreateDelivery\",\n                      component: CreateDeliveryScreen,\n                      options: {\n                        title: 'Nouvelle livraison'\n                      }\n                    }), _jsx(Stack.Screen, {\n                      name: \"TrackDelivery\",\n                      component: TrackDeliveryScreen,\n                      options: {\n                        title: 'Suivi'\n                      }\n                    }), _jsx(Stack.Screen, {\n                      name: \"CourierHome\",\n                      component: CourierHomeScreen,\n                      options: {\n                        title: 'Tableau de bord'\n                      }\n                    }), _jsx(Stack.Screen, {\n                      name: \"BidScreen\",\n                      component: BidScreen,\n                      options: {\n                        title: 'Faire une offre'\n                      }\n                    }), _jsx(Stack.Screen, {\n                      name: \"CourierTrackDelivery\",\n                      component: CourierTrackDeliveryScreen,\n                      options: {\n                        title: 'Livraison en cours'\n                      }\n                    }), _jsx(Stack.Screen, {\n                      name: \"Profile\",\n                      component: ProfileScreen,\n                      options: {\n                        title: 'Profil'\n                      }\n                    }), _jsx(Stack.Screen, {\n                      name: \"Settings\",\n                      component: SettingsScreen,\n                      options: {\n                        title: 'Paramètres'\n                      }\n                    }), _jsx(Stack.Screen, {\n                      name: \"Notifications\",\n                      component: NotificationsScreen,\n                      options: {\n                        title: 'Notifications'\n                      }\n                    })]\n                  })\n                }), _jsx(StatusBar, {\n                  style: \"light\"\n                })]\n              })\n            })\n          })\n        })\n      })\n    })\n  });\n}","map":{"version":3,"names":["React","useEffect","useState","StatusBar","SafeAreaProvider","Provider","PaperProvider","SplashScreen","Font","NavigationContainer","createNativeStackNavigator","AuthProvider","NetworkProvider","NotificationProvider","ThemeProvider","WebSocketProvider","LoginScreen","RegisterScreen","ForgotPasswordScreen","VerifyOTPScreen","ClientHomeScreen","CreateDeliveryScreen","TrackDeliveryScreen","CourierHomeScreen","BidScreen","CourierTrackDeliveryScreen","ProfileScreen","SettingsScreen","NotificationsScreen","jsx","_jsx","jsxs","_jsxs","Stack","preventAutoHideAsync","App","_useState","_useState2","_slicedToArray","appIsReady","setAppIsReady","prepare","_prepare","apply","arguments","_asyncToGenerator","loadAsync","require","e","console","warn","hideAsync","children","Navigator","initialRouteName","screenOptions","headerStyle","backgroundColor","headerTintColor","headerTitleStyle","fontWeight","Screen","name","component","options","headerShown","title","style"],"sources":["/home/runner/workspace/mobile/App.tsx"],"sourcesContent":["\nimport React, { useEffect, useState } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Provider as PaperProvider } from 'react-native-paper';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as Font from 'expo-font';\n\n// Navigation\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\n// Contexts\nimport { AuthProvider } from './contexts/AuthContext';\nimport { NetworkProvider } from './contexts/NetworkContext';\nimport { NotificationProvider } from './contexts/NotificationContext';\nimport { ThemeProvider } from './contexts/ThemeContext';\nimport { WebSocketProvider } from './contexts/WebSocketContext';\n\n// Screens\nimport LoginScreen from './screens/auth/LoginScreen';\nimport RegisterScreen from './screens/auth/RegisterScreen';\nimport ForgotPasswordScreen from './screens/auth/ForgotPasswordScreen';\nimport VerifyOTPScreen from './screens/auth/VerifyOTPScreen';\n\n// Client Screens\nimport ClientHomeScreen from './screens/client/HomeScreen';\nimport CreateDeliveryScreen from './screens/client/CreateDeliveryScreen';\nimport TrackDeliveryScreen from './screens/client/TrackDeliveryScreen';\n\n// Courier Screens\nimport CourierHomeScreen from './screens/courier/HomeScreen';\nimport BidScreen from './screens/courier/BidScreen';\nimport CourierTrackDeliveryScreen from './screens/courier/CourierTrackDeliveryScreen';\n\n// Common Screens\nimport ProfileScreen from './screens/profile/ProfileScreen';\nimport SettingsScreen from './screens/SettingsScreen';\nimport NotificationsScreen from './screens/NotificationsScreen';\n\nconst Stack = createNativeStackNavigator();\n\n// Prevent splash screen from auto-hiding\nSplashScreen.preventAutoHideAsync();\n\nexport default function App() {\n  const [appIsReady, setAppIsReady] = useState(false);\n\n  useEffect(() => {\n    async function prepare() {\n      try {\n        // Load fonts\n        await Font.loadAsync({\n          'Roboto': require('./node_modules/react-native-vector-icons/Fonts/Roboto.ttf'),\n        });\n      } catch (e) {\n        console.warn('Error loading fonts:', e);\n      } finally {\n        setAppIsReady(true);\n      }\n    }\n\n    prepare();\n  }, []);\n\n  useEffect(() => {\n    if (appIsReady) {\n      SplashScreen.hideAsync();\n    }\n  }, [appIsReady]);\n\n  if (!appIsReady) {\n    return null;\n  }\n\n  return (\n    <SafeAreaProvider>\n      <ThemeProvider>\n        <NetworkProvider>\n          <AuthProvider>\n            <NotificationProvider>\n              <WebSocketProvider>\n                <PaperProvider>\n                  <NavigationContainer>\n                    <Stack.Navigator\n                      initialRouteName=\"Login\"\n                      screenOptions={{\n                        headerStyle: {\n                          backgroundColor: '#FF6B00',\n                        },\n                        headerTintColor: '#fff',\n                        headerTitleStyle: {\n                          fontWeight: 'bold',\n                        },\n                      }}\n                    >\n                      {/* Auth Screens */}\n                      <Stack.Screen \n                        name=\"Login\" \n                        component={LoginScreen}\n                        options={{ headerShown: false }}\n                      />\n                      <Stack.Screen \n                        name=\"Register\" \n                        component={RegisterScreen}\n                        options={{ title: 'Inscription' }}\n                      />\n                      <Stack.Screen \n                        name=\"ForgotPassword\" \n                        component={ForgotPasswordScreen}\n                        options={{ title: 'Mot de passe oublié' }}\n                      />\n                      <Stack.Screen \n                        name=\"VerifyOTP\" \n                        component={VerifyOTPScreen}\n                        options={{ title: 'Vérification' }}\n                      />\n\n                      {/* Client Screens */}\n                      <Stack.Screen \n                        name=\"ClientHome\" \n                        component={ClientHomeScreen}\n                        options={{ title: 'Accueil' }}\n                      />\n                      <Stack.Screen \n                        name=\"CreateDelivery\" \n                        component={CreateDeliveryScreen}\n                        options={{ title: 'Nouvelle livraison' }}\n                      />\n                      <Stack.Screen \n                        name=\"TrackDelivery\" \n                        component={TrackDeliveryScreen}\n                        options={{ title: 'Suivi' }}\n                      />\n\n                      {/* Courier Screens */}\n                      <Stack.Screen \n                        name=\"CourierHome\" \n                        component={CourierHomeScreen}\n                        options={{ title: 'Tableau de bord' }}\n                      />\n                      <Stack.Screen \n                        name=\"BidScreen\" \n                        component={BidScreen}\n                        options={{ title: 'Faire une offre' }}\n                      />\n                      <Stack.Screen \n                        name=\"CourierTrackDelivery\" \n                        component={CourierTrackDeliveryScreen}\n                        options={{ title: 'Livraison en cours' }}\n                      />\n\n                      {/* Common Screens */}\n                      <Stack.Screen \n                        name=\"Profile\" \n                        component={ProfileScreen}\n                        options={{ title: 'Profil' }}\n                      />\n                      <Stack.Screen \n                        name=\"Settings\" \n                        component={SettingsScreen}\n                        options={{ title: 'Paramètres' }}\n                      />\n                      <Stack.Screen \n                        name=\"Notifications\" \n                        component={NotificationsScreen}\n                        options={{ title: 'Notifications' }}\n                      />\n                    </Stack.Navigator>\n                  </NavigationContainer>\n                  <StatusBar style=\"light\" />\n                </PaperProvider>\n              </WebSocketProvider>\n            </NotificationProvider>\n          </AuthProvider>\n        </NetworkProvider>\n      </ThemeProvider>\n    </SafeAreaProvider>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}