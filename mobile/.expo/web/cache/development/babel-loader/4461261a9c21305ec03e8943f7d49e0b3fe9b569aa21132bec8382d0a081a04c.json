{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport * as Localization from 'expo-localization';\nimport { translations } from \"./translations\";\nvar detectUserLanguage = function () {\n  var _ref = _asyncToGenerator(function* () {\n    try {\n      var savedLanguage = yield AsyncStorage.getItem(\"userLanguage\");\n      if (savedLanguage) {\n        return savedLanguage;\n      }\n      if (!Localization.locale) {\n        console.error(\"Localization.locale is undefined. Falling back to default language.\");\n        return \"fr\";\n      }\n      var deviceLocale = Localization.locale.split(\"-\")[0];\n      var supportedLanguages = Object.keys(translations);\n      if (supportedLanguages.includes(deviceLocale)) {\n        return deviceLocale;\n      }\n      return \"fr\";\n    } catch (error) {\n      console.error(\"Error detecting user language:\", error);\n      return \"fr\";\n    }\n  });\n  return function detectUserLanguage() {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar initI18n = function () {\n  var _ref2 = _asyncToGenerator(function* () {\n    var userLanguage = yield detectUserLanguage();\n    i18n.use(initReactI18next).init({\n      resources: translations,\n      lng: 'fr',\n      fallbackLng: 'fr',\n      returnNull: false,\n      interpolation: {\n        escapeValue: false\n      }\n    });\n    yield AsyncStorage.setItem(\"userLanguage\", userLanguage);\n  });\n  return function initI18n() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var changeLanguage = function () {\n  var _ref3 = _asyncToGenerator(function* (language) {\n    try {\n      yield i18n.changeLanguage(language);\n      yield AsyncStorage.setItem(\"userLanguage\", language);\n      return true;\n    } catch (error) {\n      console.error(\"Error changing language:\", error);\n      return false;\n    }\n  });\n  return function changeLanguage(_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var getCurrentLanguage = function getCurrentLanguage() {\n  return i18n.language;\n};\nexport var getAvailableLanguages = function getAvailableLanguages() {\n  return Object.keys(translations);\n};\ninitI18n();\nexport default i18n;","map":{"version":3,"names":["i18n","initReactI18next","AsyncStorage","Localization","translations","detectUserLanguage","_ref","_asyncToGenerator","savedLanguage","getItem","locale","console","error","deviceLocale","split","supportedLanguages","Object","keys","includes","apply","arguments","initI18n","_ref2","userLanguage","use","init","resources","lng","fallbackLng","returnNull","interpolation","escapeValue","setItem","changeLanguage","_ref3","language","_x","getCurrentLanguage","getAvailableLanguages"],"sources":["/home/runner/workspace/mobile/i18n/index.ts"],"sourcesContent":["import i18n from 'i18next'\nimport { initReactI18next } from 'react-i18next'\nimport AsyncStorage from '@react-native-async-storage/async-storage'\nimport * as Localization from 'expo-localization'\n\nimport { translations } from './translations'\n\n// Configuration TypeScript pour i18n\ndeclare module 'i18next' {\n  interface CustomTypeOptions {\n    returnNull: false\n  }\n}\n\n// Fonction pour détecter la langue par défaut\nconst detectUserLanguage = async () => {\n  try {\n    // Vérifier si une langue a déjà été sélectionnée\n    const savedLanguage = await AsyncStorage.getItem(\"userLanguage\")\n    if (savedLanguage) {\n      return savedLanguage\n    }\n\n    // Sinon, utiliser la langue du système\n    if (!Localization.locale) {\n      console.error(\"Localization.locale is undefined. Falling back to default language.\");\n      return \"fr\"; // Langue par défaut\n    }\n    const deviceLocale = Localization.locale.split(\"-\")[0] // Obtenir juste le code de langue (ex: 'fr' de 'fr-FR')\n\n    // Vérifier si la langue du système est prise en charge\n    const supportedLanguages = Object.keys(translations)\n    if (supportedLanguages.includes(deviceLocale)) {\n      return deviceLocale\n    }\n\n    // Par défaut, utiliser le français\n    return \"fr\"\n  } catch (error) {\n    console.error(\"Error detecting user language:\", error)\n    return \"fr\" // Langue par défaut en cas d'erreur\n  }\n}\n\n// Initialiser i18next\nconst initI18n = async () => {\n  const userLanguage = await detectUserLanguage()\n\n  i18n\n  .use(initReactI18next)\n  .init({\n    resources: translations,\n    lng: 'fr',\n    fallbackLng: 'fr',\n    returnNull: false,\n    interpolation: {\n      escapeValue: false,\n    },\n  })\n\n  // Sauvegarder la langue détectée\n  await AsyncStorage.setItem(\"userLanguage\", userLanguage)\n}\n\n// Fonction pour changer la langue\nexport const changeLanguage = async (language: string) => {\n  try {\n    await i18n.changeLanguage(language)\n    await AsyncStorage.setItem(\"userLanguage\", language)\n    return true\n  } catch (error) {\n    console.error(\"Error changing language:\", error)\n    return false\n  }\n}\n\n// Fonction pour obtenir la langue actuelle\nexport const getCurrentLanguage = () => {\n  return i18n.language\n}\n\n// Fonction pour obtenir les langues disponibles\nexport const getAvailableLanguages = () => {\n  return Object.keys(translations)\n}\n\n// Initialiser i18n\ninitI18n()\n\nexport default i18n"],"mappings":";AAAA,OAAOA,IAAI,MAAM,SAAS;AAC1B,SAASC,gBAAgB,QAAQ,eAAe;AAChD,OAAOC,YAAY,MAAM,2CAA2C;AACpE,OAAO,KAAKC,YAAY,MAAM,mBAAmB;AAEjD,SAASC,YAAY;AAUrB,IAAMC,kBAAkB;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;IACrC,IAAI;MAEF,IAAMC,aAAa,SAASN,YAAY,CAACO,OAAO,CAAC,cAAc,CAAC;MAChE,IAAID,aAAa,EAAE;QACjB,OAAOA,aAAa;MACtB;MAGA,IAAI,CAACL,YAAY,CAACO,MAAM,EAAE;QACxBC,OAAO,CAACC,KAAK,CAAC,qEAAqE,CAAC;QACpF,OAAO,IAAI;MACb;MACA,IAAMC,YAAY,GAAGV,YAAY,CAACO,MAAM,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAGtD,IAAMC,kBAAkB,GAAGC,MAAM,CAACC,IAAI,CAACb,YAAY,CAAC;MACpD,IAAIW,kBAAkB,CAACG,QAAQ,CAACL,YAAY,CAAC,EAAE;QAC7C,OAAOA,YAAY;MACrB;MAGA,OAAO,IAAI;IACb,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,OAAO,IAAI;IACb;EACF,CAAC;EAAA,gBA3BKP,kBAAkBA,CAAA;IAAA,OAAAC,IAAA,CAAAa,KAAA,OAAAC,SAAA;EAAA;AAAA,GA2BvB;AAGD,IAAMC,QAAQ;EAAA,IAAAC,KAAA,GAAAf,iBAAA,CAAG,aAAY;IAC3B,IAAMgB,YAAY,SAASlB,kBAAkB,CAAC,CAAC;IAE/CL,IAAI,CACHwB,GAAG,CAACvB,gBAAgB,CAAC,CACrBwB,IAAI,CAAC;MACJC,SAAS,EAAEtB,YAAY;MACvBuB,GAAG,EAAE,IAAI;MACTC,WAAW,EAAE,IAAI;MACjBC,UAAU,EAAE,KAAK;MACjBC,aAAa,EAAE;QACbC,WAAW,EAAE;MACf;IACF,CAAC,CAAC;IAGF,MAAM7B,YAAY,CAAC8B,OAAO,CAAC,cAAc,EAAET,YAAY,CAAC;EAC1D,CAAC;EAAA,gBAjBKF,QAAQA,CAAA;IAAA,OAAAC,KAAA,CAAAH,KAAA,OAAAC,SAAA;EAAA;AAAA,GAiBb;AAGD,OAAO,IAAMa,cAAc;EAAA,IAAAC,KAAA,GAAA3B,iBAAA,CAAG,WAAO4B,QAAgB,EAAK;IACxD,IAAI;MACF,MAAMnC,IAAI,CAACiC,cAAc,CAACE,QAAQ,CAAC;MACnC,MAAMjC,YAAY,CAAC8B,OAAO,CAAC,cAAc,EAAEG,QAAQ,CAAC;MACpD,OAAO,IAAI;IACb,CAAC,CAAC,OAAOvB,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,OAAO,KAAK;IACd;EACF,CAAC;EAAA,gBATYqB,cAAcA,CAAAG,EAAA;IAAA,OAAAF,KAAA,CAAAf,KAAA,OAAAC,SAAA;EAAA;AAAA,GAS1B;AAGD,OAAO,IAAMiB,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAA,EAAS;EACtC,OAAOrC,IAAI,CAACmC,QAAQ;AACtB,CAAC;AAGD,OAAO,IAAMG,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAA,EAAS;EACzC,OAAOtB,MAAM,CAACC,IAAI,CAACb,YAAY,CAAC;AAClC,CAAC;AAGDiB,QAAQ,CAAC,CAAC;AAEV,eAAerB,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}