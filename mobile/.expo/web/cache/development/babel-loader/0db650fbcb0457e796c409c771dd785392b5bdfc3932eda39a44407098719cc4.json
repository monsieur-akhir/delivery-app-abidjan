{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar CommuneWeatherService = function () {\n  function CommuneWeatherService() {\n    _classCallCheck(this, CommuneWeatherService);\n  }\n  return _createClass(CommuneWeatherService, null, [{\n    key: \"getAvailableCommunes\",\n    value: function getAvailableCommunes() {\n      return this.communes;\n    }\n  }, {\n    key: \"getWeatherForCommune\",\n    value: function () {\n      var _getWeatherForCommune = _asyncToGenerator(function* (commune) {\n        try {\n          return this.getMockWeatherData(commune);\n        } catch (error) {\n          console.error(\"Error fetching weather data for \" + commune + \":\", error);\n          throw new Error(\"Failed to fetch weather data for \" + commune);\n        }\n      });\n      function getWeatherForCommune(_x) {\n        return _getWeatherForCommune.apply(this, arguments);\n      }\n      return getWeatherForCommune;\n    }()\n  }, {\n    key: \"getMockWeatherData\",\n    value: function getMockWeatherData(commune) {\n      var temperature = 25 + Math.floor(Math.random() * 10);\n      var humidity = 50 + Math.floor(Math.random() * 40);\n      var windSpeed = 5 + Math.floor(Math.random() * 20);\n      var conditions = [\"Sunny\", \"Partly Cloudy\", \"Cloudy\", \"Light Rain\", \"Heavy Rain\", \"Thunderstorm\"];\n      var randomCondition = conditions[Math.floor(Math.random() * conditions.length)];\n      var forecast = [];\n      var days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n      var today = new Date();\n      for (var i = 0; i < 5; i++) {\n        var forecastDate = new Date();\n        forecastDate.setDate(today.getDate() + i);\n        var dayName = days[forecastDate.getDay()];\n        forecast.push({\n          day: dayName,\n          date: forecastDate.toISOString().split(\"T\")[0],\n          condition: conditions[Math.floor(Math.random() * conditions.length)],\n          max_temp: temperature + Math.floor(Math.random() * 5),\n          min_temp: temperature - Math.floor(Math.random() * 5),\n          humidity: humidity + Math.floor(Math.random() * 10) - 5,\n          wind_speed: windSpeed + Math.floor(Math.random() * 5) - 2,\n          chance_of_rain: Math.floor(Math.random() * 100),\n          icon: \"cloud\"\n        });\n      }\n      var alerts = [];\n      if (Math.random() > 0.7) {\n        alerts.push({\n          id: \"alert-\" + Date.now(),\n          type: \"Weather Warning\",\n          severity: Math.random() > 0.7 ? \"high\" : Math.random() > 0.5 ? \"medium\" : \"low\",\n          title: \"Heavy Rain Warning\",\n          description: \"Heavy rainfall expected in the area. Possible flooding in low-lying areas. Take necessary precautions.\",\n          start_time: new Date().toISOString(),\n          end_time: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n          affected_communes: [commune].concat(_toConsumableArray(this.communes.filter(function (c) {\n            return c !== commune;\n          }).slice(0, 3))),\n          precautions: [\"Avoid unnecessary travel\", \"Stay away from flood-prone areas\", \"Keep emergency supplies ready\", \"Follow local authority instructions\"],\n          source: \"National Weather Service\"\n        });\n      }\n      return {\n        location: \"Abidjan\",\n        commune: commune,\n        current: {\n          temperature: temperature,\n          condition: randomCondition,\n          humidity: humidity,\n          wind_speed: windSpeed,\n          pressure: 1010 + Math.floor(Math.random() * 10),\n          visibility: 8 + Math.floor(Math.random() * 4),\n          uv_index: Math.floor(Math.random() * 11),\n          feels_like: temperature + Math.floor(Math.random() * 3) - 1,\n          icon: \"sun\"\n        },\n        forecast: forecast,\n        alerts: alerts\n      };\n    }\n  }]);\n}();\nCommuneWeatherService.API_URL = \"https://api.example.com/weather\";\nCommuneWeatherService.communes = [\"Plateau\", \"Cocody\", \"Yopougon\", \"Abobo\", \"Adjamé\", \"Koumassi\", \"Marcory\", \"Port-Bouët\", \"Treichville\", \"Attécoubé\"];\nexport default CommuneWeatherService;","map":{"version":3,"names":["CommuneWeatherService","_classCallCheck","_createClass","key","value","getAvailableCommunes","communes","_getWeatherForCommune","_asyncToGenerator","commune","getMockWeatherData","error","console","Error","getWeatherForCommune","_x","apply","arguments","temperature","Math","floor","random","humidity","windSpeed","conditions","randomCondition","length","forecast","days","today","Date","i","forecastDate","setDate","getDate","dayName","getDay","push","day","date","toISOString","split","condition","max_temp","min_temp","wind_speed","chance_of_rain","icon","alerts","id","now","type","severity","title","description","start_time","end_time","affected_communes","concat","_toConsumableArray","filter","c","slice","precautions","source","location","current","pressure","visibility","uv_index","feels_like","API_URL"],"sources":["/home/runner/workspace/mobile/services/CommuneWeatherService.ts"],"sourcesContent":["// Définition des types\ninterface WeatherCurrent {\n  temperature: number\n  condition: string\n  humidity: number\n  wind_speed: number\n  pressure: number\n  visibility: number\n  uv_index: number\n  feels_like: number\n  icon: string\n}\n\ninterface WeatherForecastDay {\n  day: string\n  date: string\n  condition: string\n  max_temp: number\n  min_temp: number\n  humidity: number\n  wind_speed: number\n  chance_of_rain: number\n  icon: string\n}\n\ninterface WeatherAlert {\n  id: string\n  type: string\n  severity: \"low\" | \"medium\" | \"high\"\n  title: string\n  description: string\n  start_time: string\n  end_time: string\n  affected_communes: string[]\n  precautions?: string[]\n  source?: string\n}\n\ninterface WeatherData {\n  location: string\n  commune: string\n  current: WeatherCurrent\n  forecast: WeatherForecastDay[]\n  alerts: WeatherAlert[]\n}\n\nclass CommuneWeatherService {\n  private static API_URL = \"https://api.example.com/weather\"\n  private static communes = [\n    \"Plateau\",\n    \"Cocody\",\n    \"Yopougon\",\n    \"Abobo\",\n    \"Adjamé\",\n    \"Koumassi\",\n    \"Marcory\",\n    \"Port-Bouët\",\n    \"Treichville\",\n    \"Attécoubé\",\n  ]\n\n  // Récupérer la liste des communes disponibles\n  static getAvailableCommunes(): string[] {\n    return this.communes\n  }\n\n  // Récupérer les données météo pour une commune spécifique\n  static async getWeatherForCommune(commune: string): Promise<WeatherData> {\n    try {\n      // Dans un environnement réel, nous ferions un appel API ici\n      // Pour l'instant, nous simulons une réponse\n      return this.getMockWeatherData(commune)\n    } catch (error) {\n      console.error(`Error fetching weather data for ${commune}:`, error)\n      throw new Error(`Failed to fetch weather data for ${commune}`)\n    }\n  }\n\n  // Données météo simulées pour le développement\n  private static getMockWeatherData(commune: string): WeatherData {\n    // Générer des données aléatoires basées sur la commune\n    const temperature = 25 + Math.floor(Math.random() * 10)\n    const humidity = 50 + Math.floor(Math.random() * 40)\n    const windSpeed = 5 + Math.floor(Math.random() * 20)\n    const conditions = [\"Sunny\", \"Partly Cloudy\", \"Cloudy\", \"Light Rain\", \"Heavy Rain\", \"Thunderstorm\"]\n    const randomCondition = conditions[Math.floor(Math.random() * conditions.length)]\n\n    // Générer des prévisions pour les 5 prochains jours\n    const forecast: WeatherForecastDay[] = []\n    const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n    const today = new Date()\n\n    for (let i = 0; i < 5; i++) {\n      const forecastDate = new Date()\n      forecastDate.setDate(today.getDate() + i)\n      const dayName = days[forecastDate.getDay()]\n\n      forecast.push({\n        day: dayName,\n        date: forecastDate.toISOString().split(\"T\")[0],\n        condition: conditions[Math.floor(Math.random() * conditions.length)],\n        max_temp: temperature + Math.floor(Math.random() * 5),\n        min_temp: temperature - Math.floor(Math.random() * 5),\n        humidity: humidity + Math.floor(Math.random() * 10) - 5,\n        wind_speed: windSpeed + Math.floor(Math.random() * 5) - 2,\n        chance_of_rain: Math.floor(Math.random() * 100),\n        icon: \"cloud\",\n      })\n    }\n\n    // Générer des alertes aléatoires (1 chance sur 3 d'avoir une alerte)\n    const alerts: WeatherAlert[] = []\n    if (Math.random() > 0.7) {\n      alerts.push({\n        id: `alert-${Date.now()}`,\n        type: \"Weather Warning\",\n        severity: Math.random() > 0.7 ? \"high\" : Math.random() > 0.5 ? \"medium\" : \"low\",\n        title: \"Heavy Rain Warning\",\n        description:\n          \"Heavy rainfall expected in the area. Possible flooding in low-lying areas. Take necessary precautions.\",\n        start_time: new Date().toISOString(),\n        end_time: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n        affected_communes: [commune, ...this.communes.filter((c) => c !== commune).slice(0, 3)],\n        precautions: [\n          \"Avoid unnecessary travel\",\n          \"Stay away from flood-prone areas\",\n          \"Keep emergency supplies ready\",\n          \"Follow local authority instructions\",\n        ],\n        source: \"National Weather Service\",\n      })\n    }\n\n    return {\n      location: \"Abidjan\",\n      commune: commune,\n      current: {\n        temperature: temperature,\n        condition: randomCondition,\n        humidity: humidity,\n        wind_speed: windSpeed,\n        pressure: 1010 + Math.floor(Math.random() * 10),\n        visibility: 8 + Math.floor(Math.random() * 4),\n        uv_index: Math.floor(Math.random() * 11),\n        feels_like: temperature + Math.floor(Math.random() * 3) - 1,\n        icon: \"sun\",\n      },\n      forecast: forecast,\n      alerts: alerts,\n    }\n  }\n}\n\nexport default CommuneWeatherService\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}