{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { Platform } from 'expo-modules-core';\nimport UAParser from 'ua-parser-js';\nimport { DeviceType } from \"./Device.types\";\nvar result = null;\nif (Platform.isDOMAvailable) {\n  var parser = new UAParser(window.navigator.userAgent);\n  result = parser.getResult();\n}\nfunction convertGiBtoBytes(gib) {\n  return Math.round(gib * 1024 ** 3);\n}\nexport default {\n  get isDevice() {\n    return true;\n  },\n  get brand() {\n    return null;\n  },\n  get manufacturer() {\n    return result && result.device.vendor || null;\n  },\n  get modelName() {\n    return result && result.device.model || null;\n  },\n  get deviceYearClass() {\n    return null;\n  },\n  get totalMemory() {\n    if (Platform.isDOMAvailable && 'deviceMemory' in navigator) {\n      var _navigator = navigator,\n        deviceMemory = _navigator.deviceMemory;\n      return convertGiBtoBytes(deviceMemory);\n    }\n    return null;\n  },\n  get supportedCpuArchitectures() {\n    return result && result.cpu.architecture ? [result.cpu.architecture] : null;\n  },\n  get osName() {\n    return result && result.os.name || '';\n  },\n  get osVersion() {\n    return result && result.os.version || '';\n  },\n  get osBuildId() {\n    return null;\n  },\n  get osInternalBuildId() {\n    return null;\n  },\n  get deviceName() {\n    return null;\n  },\n  getDeviceTypeAsync: function () {\n    var _getDeviceTypeAsync = _asyncToGenerator(function* () {\n      switch (result.device.type) {\n        case 'mobile':\n          return DeviceType.PHONE;\n        case 'tablet':\n          return DeviceType.TABLET;\n        case 'smarttv':\n          return DeviceType.TV;\n        case 'console':\n        case 'embedded':\n        case 'wearable':\n          return DeviceType.UNKNOWN;\n        default:\n          return DeviceType.DESKTOP;\n      }\n    });\n    function getDeviceTypeAsync() {\n      return _getDeviceTypeAsync.apply(this, arguments);\n    }\n    return getDeviceTypeAsync;\n  }(),\n  isRootedExperimentalAsync: function () {\n    var _isRootedExperimentalAsync = _asyncToGenerator(function* () {\n      return false;\n    });\n    function isRootedExperimentalAsync() {\n      return _isRootedExperimentalAsync.apply(this, arguments);\n    }\n    return isRootedExperimentalAsync;\n  }()\n};","map":{"version":3,"names":["Platform","UAParser","DeviceType","result","isDOMAvailable","parser","window","navigator","userAgent","getResult","convertGiBtoBytes","gib","Math","round","isDevice","brand","manufacturer","device","vendor","modelName","model","deviceYearClass","totalMemory","_navigator","deviceMemory","supportedCpuArchitectures","cpu","architecture","osName","os","name","osVersion","version","osBuildId","osInternalBuildId","deviceName","getDeviceTypeAsync","_getDeviceTypeAsync","_asyncToGenerator","type","PHONE","TABLET","TV","UNKNOWN","DESKTOP","apply","arguments","isRootedExperimentalAsync","_isRootedExperimentalAsync"],"sources":["/home/runner/workspace/mobile/node_modules/expo-device/src/ExpoDevice.web.ts"],"sourcesContent":["import { Platform } from 'expo-modules-core';\nimport UAParser from 'ua-parser-js';\n\nimport { DeviceType } from './Device.types';\n\ntype NavigatorWithDeviceMemory = Navigator & { deviceMemory: number };\n\nlet result: any = null;\nif (Platform.isDOMAvailable) {\n  const parser = new UAParser(window.navigator.userAgent);\n  result = parser.getResult();\n}\n\nfunction convertGiBtoBytes(gib: number): number {\n  return Math.round(gib * 1024 ** 3);\n}\n\nexport default {\n  get isDevice(): boolean {\n    return true;\n  },\n  get brand(): null {\n    return null;\n  },\n  get manufacturer(): null {\n    return (result && result.device.vendor) || null;\n  },\n  get modelName(): string | null {\n    return (result && result.device.model) || null;\n  },\n  get deviceYearClass(): null {\n    return null;\n  },\n  get totalMemory(): number | null {\n    if (Platform.isDOMAvailable && 'deviceMemory' in navigator) {\n      const { deviceMemory } = navigator as NavigatorWithDeviceMemory;\n      return convertGiBtoBytes(deviceMemory);\n    }\n    return null;\n  },\n  get supportedCpuArchitectures(): string[] | null {\n    return result && result.cpu.architecture ? [result.cpu.architecture] : null;\n  },\n  get osName(): string {\n    return (result && result.os.name) || '';\n  },\n  get osVersion(): string {\n    return (result && result.os.version) || '';\n  },\n  get osBuildId(): null {\n    return null;\n  },\n  get osInternalBuildId(): null {\n    return null;\n  },\n  get deviceName(): null {\n    return null;\n  },\n  async getDeviceTypeAsync(): Promise<DeviceType> {\n    switch (result.device.type) {\n      case 'mobile':\n        return DeviceType.PHONE;\n      case 'tablet':\n        return DeviceType.TABLET;\n      case 'smarttv':\n        return DeviceType.TV;\n      case 'console':\n      case 'embedded':\n      case 'wearable':\n        return DeviceType.UNKNOWN;\n      default:\n        return DeviceType.DESKTOP;\n    }\n  },\n  async isRootedExperimentalAsync(): Promise<boolean> {\n    return false;\n  },\n};\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,mBAAmB;AAC5C,OAAOC,QAAQ,MAAM,cAAc;AAEnC,SAASC,UAAU;AAInB,IAAIC,MAAM,GAAQ,IAAI;AACtB,IAAIH,QAAQ,CAACI,cAAc,EAAE;EAC3B,IAAMC,MAAM,GAAG,IAAIJ,QAAQ,CAACK,MAAM,CAACC,SAAS,CAACC,SAAS,CAAC;EACvDL,MAAM,GAAGE,MAAM,CAACI,SAAS,EAAE;;AAG7B,SAASC,iBAAiBA,CAACC,GAAW;EACpC,OAAOC,IAAI,CAACC,KAAK,CAACF,GAAG,GAAG,IAAI,IAAI,CAAC,CAAC;AACpC;AAEA,eAAe;EACb,IAAIG,QAAQA,CAAA;IACV,OAAO,IAAI;EACb,CAAC;EACD,IAAIC,KAAKA,CAAA;IACP,OAAO,IAAI;EACb,CAAC;EACD,IAAIC,YAAYA,CAAA;IACd,OAAQb,MAAM,IAAIA,MAAM,CAACc,MAAM,CAACC,MAAM,IAAK,IAAI;EACjD,CAAC;EACD,IAAIC,SAASA,CAAA;IACX,OAAQhB,MAAM,IAAIA,MAAM,CAACc,MAAM,CAACG,KAAK,IAAK,IAAI;EAChD,CAAC;EACD,IAAIC,eAAeA,CAAA;IACjB,OAAO,IAAI;EACb,CAAC;EACD,IAAIC,WAAWA,CAAA;IACb,IAAItB,QAAQ,CAACI,cAAc,IAAI,cAAc,IAAIG,SAAS,EAAE;MAC1D,IAAAgB,UAAA,GAAyBhB,SAAsC;QAAvDiB,YAAY,GAAAD,UAAA,CAAZC,YAAY;MACpB,OAAOd,iBAAiB,CAACc,YAAY,CAAC;;IAExC,OAAO,IAAI;EACb,CAAC;EACD,IAAIC,yBAAyBA,CAAA;IAC3B,OAAOtB,MAAM,IAAIA,MAAM,CAACuB,GAAG,CAACC,YAAY,GAAG,CAACxB,MAAM,CAACuB,GAAG,CAACC,YAAY,CAAC,GAAG,IAAI;EAC7E,CAAC;EACD,IAAIC,MAAMA,CAAA;IACR,OAAQzB,MAAM,IAAIA,MAAM,CAAC0B,EAAE,CAACC,IAAI,IAAK,EAAE;EACzC,CAAC;EACD,IAAIC,SAASA,CAAA;IACX,OAAQ5B,MAAM,IAAIA,MAAM,CAAC0B,EAAE,CAACG,OAAO,IAAK,EAAE;EAC5C,CAAC;EACD,IAAIC,SAASA,CAAA;IACX,OAAO,IAAI;EACb,CAAC;EACD,IAAIC,iBAAiBA,CAAA;IACnB,OAAO,IAAI;EACb,CAAC;EACD,IAAIC,UAAUA,CAAA;IACZ,OAAO,IAAI;EACb,CAAC;EACKC,kBAAkB;IAAA,IAAAC,mBAAA,GAAAC,iBAAA;MACtB,QAAQnC,MAAM,CAACc,MAAM,CAACsB,IAAI;QACxB,KAAK,QAAQ;UACX,OAAOrC,UAAU,CAACsC,KAAK;QACzB,KAAK,QAAQ;UACX,OAAOtC,UAAU,CAACuC,MAAM;QAC1B,KAAK,SAAS;UACZ,OAAOvC,UAAU,CAACwC,EAAE;QACtB,KAAK,SAAS;QACd,KAAK,UAAU;QACf,KAAK,UAAU;UACb,OAAOxC,UAAU,CAACyC,OAAO;QAC3B;UACE,OAAOzC,UAAU,CAAC0C,OAAO;;IAE/B,CAAC;IAAA,SAfKR,kBAAkBA,CAAA;MAAA,OAAAC,mBAAA,CAAAQ,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAlBV,kBAAkB;EAAA;EAgBlBW,yBAAyB;IAAA,IAAAC,0BAAA,GAAAV,iBAAA;MAC7B,OAAO,KAAK;IACd,CAAC;IAAA,SAFKS,yBAAyBA,CAAA;MAAA,OAAAC,0BAAA,CAAAH,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAzBC,yBAAyB;EAAA;CAGhC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}