{"ast":null,"code":"\"use client\";\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport * as Notifications from \"expo-notifications\";\nimport * as Device from \"expo-device\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useAuth } from \"./AuthContext\";\nimport { registerPushToken } from \"../services/api\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar NotificationContext = createContext(undefined);\nexport var useNotification = function useNotification() {\n  var context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error(\"useNotification must be used within a NotificationProvider\");\n  }\n  return context;\n};\nexport var useNotifications = useNotification;\nexport var NotificationProvider = function NotificationProvider(_ref) {\n  var children = _ref.children;\n  var _useAuth = useAuth(),\n    token = _useAuth.token,\n    user = _useAuth.user;\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    expoPushToken = _useState2[0],\n    setExpoPushToken = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    notification = _useState4[0],\n    setNotification = _useState4[1];\n  var _useState5 = useState([]),\n    _useState6 = _slicedToArray(_useState5, 2),\n    notifications = _useState6[0],\n    setNotifications = _useState6[1];\n  useEffect(function () {\n    registerForPushNotificationsAsync().then(function (token) {\n      return token && setExpoPushToken(token);\n    });\n    var notificationListener = Notifications.addNotificationReceivedListener(function (notification) {\n      var _notification$request;\n      setNotification(notification);\n      var newNotification = {\n        id: notification.request.identifier,\n        title: notification.request.content.title || '',\n        message: notification.request.content.body || '',\n        type: ((_notification$request = notification.request.content.data) == null ? void 0 : _notification$request.type) || 'default',\n        data: notification.request.content.data,\n        created_at: new Date().toISOString(),\n        date: new Date().toISOString(),\n        read: false,\n        is_read: false\n      };\n      addNotification(newNotification);\n    });\n    var responseListener = Notifications.addNotificationResponseReceivedListener(function (response) {\n      var notification = response.notification;\n      markNotificationAsRead(notification.request.identifier);\n      handleNotificationAction(notification.request.content.data);\n    });\n    loadSavedNotifications();\n    return function () {\n      Notifications.removeNotificationSubscription(notificationListener);\n      Notifications.removeNotificationSubscription(responseListener);\n    };\n  }, []);\n  useEffect(function () {\n    if (token && expoPushToken && user) {\n      registerPushToken(expoPushToken, user.id.toString());\n    }\n  }, [token, expoPushToken, user]);\n  var registerForPushNotificationsAsync = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      var token;\n      if (Device.isDevice) {\n        var _yield$Notifications$ = yield Notifications.getPermissionsAsync(),\n          existingStatus = _yield$Notifications$.status;\n        var finalStatus = existingStatus;\n        if (existingStatus !== \"granted\") {\n          var _yield$Notifications$2 = yield Notifications.requestPermissionsAsync(),\n            status = _yield$Notifications$2.status;\n          finalStatus = status;\n        }\n        if (finalStatus !== \"granted\") {\n          console.log(\"Failed to get push token for push notification!\");\n          return;\n        }\n        token = (yield Notifications.getExpoPushTokenAsync()).data;\n      } else {\n        console.log(\"Must use physical device for Push Notifications\");\n      }\n      if (Platform.OS === \"android\") {\n        Notifications.setNotificationChannelAsync(\"default\", {\n          name: \"default\",\n          importance: Notifications.AndroidImportance.MAX,\n          vibrationPattern: [0, 250, 250, 250],\n          lightColor: \"#FF6B00\"\n        });\n      }\n      return token;\n    });\n    return function registerForPushNotificationsAsync() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var loadSavedNotifications = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      try {\n        var savedNotifications = yield AsyncStorage.getItem(\"notifications\");\n        if (savedNotifications) {\n          setNotifications(JSON.parse(savedNotifications));\n        }\n      } catch (error) {\n        console.error(\"Error loading saved notifications:\", error);\n      }\n    });\n    return function loadSavedNotifications() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var saveNotifications = function () {\n    var _ref4 = _asyncToGenerator(function* (notificationsList) {\n      try {\n        yield AsyncStorage.setItem(\"notifications\", JSON.stringify(notificationsList));\n      } catch (error) {\n        console.error(\"Error saving notifications:\", error);\n      }\n    });\n    return function saveNotifications(_x) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var addNotification = function addNotification(newNotification) {\n    setNotifications(function (prevNotifications) {\n      var updatedNotifications = [newNotification].concat(_toConsumableArray(prevNotifications));\n      saveNotifications(updatedNotifications);\n      return updatedNotifications;\n    });\n  };\n  var markNotificationAsRead = function markNotificationAsRead(id) {\n    setNotifications(function (prevNotifications) {\n      var updatedNotifications = prevNotifications.map(function (item) {\n        return item.id.toString() === id ? _objectSpread(_objectSpread({}, item), {}, {\n          read: true\n        }) : item;\n      });\n      saveNotifications(updatedNotifications);\n      return updatedNotifications;\n    });\n  };\n  var markAllNotificationsAsRead = function markAllNotificationsAsRead() {\n    setNotifications(function (prevNotifications) {\n      var updatedNotifications = prevNotifications.map(function (item) {\n        return _objectSpread(_objectSpread({}, item), {}, {\n          read: true\n        });\n      });\n      saveNotifications(updatedNotifications);\n      return updatedNotifications;\n    });\n  };\n  var deleteNotification = function deleteNotification(id) {\n    setNotifications(function (prevNotifications) {\n      var updatedNotifications = prevNotifications.filter(function (item) {\n        return item.id.toString() !== id;\n      });\n      saveNotifications(updatedNotifications);\n      return updatedNotifications;\n    });\n  };\n  var clearAllNotifications = function clearAllNotifications() {\n    setNotifications([]);\n    saveNotifications([]);\n  };\n  var handleNotificationAction = function handleNotificationAction(data) {\n    console.log(\"Notification action data:\", data);\n  };\n  var sendLocalNotification = function () {\n    var _ref5 = _asyncToGenerator(function* (title, body) {\n      var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      yield Notifications.scheduleNotificationAsync({\n        content: {\n          title: title,\n          body: body,\n          data: data\n        },\n        trigger: null\n      });\n    });\n    return function sendLocalNotification(_x2, _x3) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  var unreadCount = notifications.filter(function (n) {\n    return !n.read;\n  }).length;\n  var value = {\n    expoPushToken: expoPushToken,\n    notification: notification,\n    notifications: notifications,\n    unreadCount: unreadCount,\n    sendLocalNotification: sendLocalNotification,\n    markNotificationAsRead: markNotificationAsRead,\n    markAllNotificationsAsRead: markAllNotificationsAsRead,\n    deleteNotification: deleteNotification,\n    clearAllNotifications: clearAllNotifications\n  };\n  return _jsx(NotificationContext.Provider, {\n    value: value,\n    children: children\n  });\n};","map":{"version":3,"names":["_defineProperty","_toConsumableArray","_asyncToGenerator","_slicedToArray","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","createContext","useContext","useState","useEffect","Notifications","Device","AsyncStorage","Platform","useAuth","registerPushToken","jsx","_jsx","NotificationContext","undefined","useNotification","context","Error","useNotifications","NotificationProvider","_ref","children","_useAuth","token","user","_useState","_useState2","expoPushToken","setExpoPushToken","_useState3","_useState4","notification","setNotification","_useState5","_useState6","notifications","setNotifications","registerForPushNotificationsAsync","then","notificationListener","addNotificationReceivedListener","_notification$request","newNotification","id","request","identifier","title","content","message","body","type","data","created_at","Date","toISOString","date","read","is_read","addNotification","responseListener","addNotificationResponseReceivedListener","response","markNotificationAsRead","handleNotificationAction","loadSavedNotifications","removeNotificationSubscription","toString","_ref2","isDevice","_yield$Notifications$","getPermissionsAsync","existingStatus","status","finalStatus","_yield$Notifications$2","requestPermissionsAsync","console","log","getExpoPushTokenAsync","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","_ref3","savedNotifications","getItem","JSON","parse","error","saveNotifications","_ref4","notificationsList","setItem","stringify","_x","prevNotifications","updatedNotifications","concat","map","item","markAllNotificationsAsRead","deleteNotification","clearAllNotifications","sendLocalNotification","_ref5","scheduleNotificationAsync","trigger","_x2","_x3","unreadCount","n","value","Provider"],"sources":["/home/runner/workspace/mobile/contexts/NotificationContext.tsx"],"sourcesContent":["\"use client\"\n\nimport type React from \"react\"\nimport { createContext, useContext, useState, useEffect, type ReactNode } from \"react\"\nimport * as Notifications from \"expo-notifications\"\nimport * as Device from \"expo-device\"\nimport AsyncStorage from \"@react-native-async-storage/async-storage\"\nimport { Platform } from \"react-native\"\nimport { useAuth } from \"./AuthContext\"\nimport { registerPushToken } from \"../services/api\"\nimport type { Notification } from \"../types/models\"\n\ninterface NotificationContextType {\n  expoPushToken: string\n  notification: Notifications.Notification | null\n  notifications: Notification[]\n  unreadCount: number\n  sendLocalNotification: (title: string, body: string, data?: any) => Promise<void>\n  markNotificationAsRead: (id: string) => void\n  markAllNotificationsAsRead: () => void\n  deleteNotification: (id: string) => void\n  clearAllNotifications: () => void\n}\n\ninterface NotificationProviderProps {\n  children: ReactNode\n}\n\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined)\n\nexport const useNotification = (): NotificationContextType => {\n  const context = useContext(NotificationContext)\n  if (!context) {\n    throw new Error(\"useNotification must be used within a NotificationProvider\")\n  }\n  return context\n}\n\nexport const useNotifications = useNotification\n\nexport const NotificationProvider: React.FC<NotificationProviderProps> = ({ children }) => {\n  const { token, user } = useAuth()\n  const [expoPushToken, setExpoPushToken] = useState<string>(\"\")\n  const [notification, setNotification] = useState<Notifications.Notification | null>(null)\n  const [notifications, setNotifications] = useState<Notification[]>([])\n\n  // Configurer les notifications\n  useEffect(() => {\n    registerForPushNotificationsAsync().then((token) => token && setExpoPushToken(token))\n\n    // Gestionnaire de notification reçue\n    const notificationListener = Notifications.addNotificationReceivedListener((notification) => {\n      setNotification(notification)\n\n      // Ajouter la notification à la liste\n      const newNotification: Notification = {\n        id: notification.request.identifier,\n        title: notification.request.content.title || '',\n        message: notification.request.content.body || '',\n        type: notification.request.content.data?.type || 'default',\n        data: notification.request.content.data,\n        created_at: new Date().toISOString(),\n        date: new Date().toISOString(),\n        read: false,\n        is_read: false,\n      }\n\n      addNotification(newNotification)\n    })\n\n    // Gestionnaire de notification cliquée\n    const responseListener = Notifications.addNotificationResponseReceivedListener((response) => {\n      const { notification } = response\n\n      // Marquer la notification comme lue\n      markNotificationAsRead(notification.request.identifier)\n\n      // Traiter l'action associée à la notification\n      handleNotificationAction(notification.request.content.data)\n    })\n\n    // Charger les notifications sauvegardées\n    loadSavedNotifications()\n\n    return () => {\n      Notifications.removeNotificationSubscription(notificationListener)\n      Notifications.removeNotificationSubscription(responseListener)\n    }\n  }, [])\n\n  // Enregistrer le token sur le serveur lorsque l'utilisateur est connecté\n  useEffect(() => {\n    if (token && expoPushToken && user) {\n      registerPushToken(expoPushToken, user.id.toString())\n    }\n  }, [token, expoPushToken, user])\n\n  // Enregistrer pour les notifications push\n  const registerForPushNotificationsAsync = async (): Promise<string | undefined> => {\n    let token\n\n    if (Device.isDevice) {\n      const { status: existingStatus } = await Notifications.getPermissionsAsync()\n      let finalStatus = existingStatus\n\n      if (existingStatus !== \"granted\") {\n        const { status } = await Notifications.requestPermissionsAsync()\n        finalStatus = status\n      }\n\n      if (finalStatus !== \"granted\") {\n        console.log(\"Failed to get push token for push notification!\")\n        return\n      }\n\n      token = (await Notifications.getExpoPushTokenAsync()).data\n    } else {\n      console.log(\"Must use physical device for Push Notifications\")\n    }\n\n    if (Platform.OS === \"android\") {\n      Notifications.setNotificationChannelAsync(\"default\", {\n        name: \"default\",\n        importance: Notifications.AndroidImportance.MAX,\n        vibrationPattern: [0, 250, 250, 250],\n        lightColor: \"#FF6B00\",\n      })\n    }\n\n    return token\n  }\n\n  // Charger les notifications sauvegardées\n  const loadSavedNotifications = async (): Promise<void> => {\n    try {\n      const savedNotifications = await AsyncStorage.getItem(\"notifications\")\n      if (savedNotifications) {\n        setNotifications(JSON.parse(savedNotifications))\n      }\n    } catch (error) {\n      console.error(\"Error loading saved notifications:\", error)\n    }\n  }\n\n  // Sauvegarder les notifications\n  const saveNotifications = async (notificationsList: Notification[]): Promise<void> => {\n    try {\n      await AsyncStorage.setItem(\"notifications\", JSON.stringify(notificationsList))\n    } catch (error) {\n      console.error(\"Error saving notifications:\", error)\n    }\n  }\n\n  // Ajouter une notification\n  const addNotification = (newNotification: Notification): void => {\n    setNotifications((prevNotifications) => {\n      const updatedNotifications = [newNotification, ...prevNotifications]\n      saveNotifications(updatedNotifications)\n      return updatedNotifications\n    })\n  }\n\n  // Marquer une notification comme lue\n  const markNotificationAsRead = (id: string): void => {\n    setNotifications((prevNotifications) => {\n      const updatedNotifications = prevNotifications.map((item) => (item.id.toString() === id ? { ...item, read: true } : item))\n      saveNotifications(updatedNotifications)\n      return updatedNotifications\n    })\n  }\n\n  // Marquer toutes les notifications comme lues\n  const markAllNotificationsAsRead = (): void => {\n    setNotifications((prevNotifications) => {\n      const updatedNotifications = prevNotifications.map((item) => ({ ...item, read: true }))\n      saveNotifications(updatedNotifications)\n      return updatedNotifications\n    })\n  }\n\n  // Supprimer une notification\n  const deleteNotification = (id: string): void => {\n    setNotifications((prevNotifications) => {\n      const updatedNotifications = prevNotifications.filter((item) => item.id.toString() !== id)\n      saveNotifications(updatedNotifications)\n      return updatedNotifications\n    })\n  }\n\n  // Vider toutes les notifications\n  const clearAllNotifications = (): void => {\n    setNotifications([])\n    saveNotifications([])\n  }\n\n  // Traiter l'action associée à une notification\n  const handleNotificationAction = (data: any): void => {\n    // Implémenter le traitement des actions de notification\n    // Par exemple, naviguer vers un écran spécifique en fonction du type de notification\n    console.log(\"Notification action data:\", data)\n  }\n\n  // Envoyer une notification locale\n  const sendLocalNotification = async (title: string, body: string, data: any = {}): Promise<void> => {\n    await Notifications.scheduleNotificationAsync({\n      content: {\n        title,\n        body,\n        data,\n      },\n      trigger: null, // Immédiatement\n    })\n  }\n\n  const unreadCount = notifications.filter((n) => !n.read).length\n\n  const value: NotificationContextType = {\n    expoPushToken,\n    notification,\n    notifications,\n    unreadCount,\n    sendLocalNotification,\n    markNotificationAsRead,\n    markAllNotificationsAsRead,\n    deleteNotification,\n    clearAllNotifications,\n  }\n\n  return <NotificationContext.Provider value={value}>{children}</NotificationContext.Provider>\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}