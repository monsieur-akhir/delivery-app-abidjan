{"ast":null,"code":"import React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport MapView, { Marker, Polyline } from 'react-native-maps';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar CustomMapView = function CustomMapView(_ref) {\n  var initialRegion = _ref.initialRegion,\n    _ref$deliveries = _ref.deliveries,\n    deliveries = _ref$deliveries === void 0 ? [] : _ref$deliveries,\n    _ref$trackingPoints = _ref.trackingPoints,\n    trackingPoints = _ref$trackingPoints === void 0 ? [] : _ref$trackingPoints,\n    route = _ref.route,\n    onRegionChange = _ref.onRegionChange,\n    style = _ref.style,\n    showsTraffic = _ref.showsTraffic;\n  var defaultRegion = {\n    latitude: 5.316667,\n    longitude: -4.033333,\n    latitudeDelta: 0.0922,\n    longitudeDelta: 0.0421\n  };\n  return _jsx(View, {\n    style: [styles.container, style],\n    children: _jsxs(MapView, {\n      style: styles.map,\n      initialRegion: initialRegion || defaultRegion,\n      onRegionChangeComplete: onRegionChange,\n      showsUserLocation: true,\n      showsMyLocationButton: true,\n      showsTraffic: showsTraffic,\n      children: [deliveries.map(function (delivery) {\n        return _jsxs(React.Fragment, {\n          children: [_jsx(Marker, {\n            coordinate: {\n              latitude: delivery.pickup_lat,\n              longitude: delivery.pickup_lng\n            },\n            title: \"Point de collecte\",\n            description: delivery.pickup_address,\n            pinColor: \"green\"\n          }), _jsx(Marker, {\n            coordinate: {\n              latitude: delivery.delivery_lat,\n              longitude: delivery.delivery_lng\n            },\n            title: \"Point de livraison\",\n            description: delivery.delivery_address,\n            pinColor: \"red\"\n          })]\n        }, delivery.id);\n      }), trackingPoints.map(function (point, index) {\n        return _jsx(Marker, {\n          coordinate: {\n            latitude: point.lat,\n            longitude: point.lng\n          },\n          title: \"Point \" + (index + 1),\n          description: point.notes || ''\n        }, point.id + \"-\" + index);\n      }), route && route.coordinates.length > 0 && _jsx(Polyline, {\n        coordinates: route.coordinates,\n        strokeColor: \"#007AFF\",\n        strokeWidth: 3\n      })]\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  map: {\n    flex: 1\n  }\n});\nexport default CustomMapView;\nexport { CustomMapView };","map":{"version":3,"names":["React","View","StyleSheet","MapView","Marker","Polyline","jsx","_jsx","jsxs","_jsxs","CustomMapView","_ref","initialRegion","_ref$deliveries","deliveries","_ref$trackingPoints","trackingPoints","route","onRegionChange","style","showsTraffic","defaultRegion","latitude","longitude","latitudeDelta","longitudeDelta","styles","container","children","map","onRegionChangeComplete","showsUserLocation","showsMyLocationButton","delivery","Fragment","coordinate","pickup_lat","pickup_lng","title","description","pickup_address","pinColor","delivery_lat","delivery_lng","delivery_address","id","point","index","lat","lng","notes","coordinates","length","strokeColor","strokeWidth","create","flex"],"sources":["/home/runner/workspace/mobile/components/CustomMapView.tsx"],"sourcesContent":["import React from 'react'\nimport { View, StyleSheet } from 'react-native'\nimport MapView, { Marker, Polyline, Region } from 'react-native-maps'\nimport type { Delivery, TrackingPoint } from '../types'\n\nexport interface MapRoute {\n  coordinates: Array<{\n    latitude: number\n    longitude: number\n  }>\n  distance: number\n  duration: number\n}\n\ninterface CustomMapViewProps {\n  initialRegion?: Region\n  deliveries?: Delivery[]\n  trackingPoints?: TrackingPoint[]\n  route?: MapRoute\n  onRegionChange?: (region: Region) => void\n  style?: any\n  showsTraffic?: boolean\n}\n\nconst CustomMapView: React.FC<CustomMapViewProps> = ({\n  initialRegion,\n  deliveries = [],\n  trackingPoints = [],\n  route,\n  onRegionChange,\n  style,\n  showsTraffic\n}) => {\n  const defaultRegion: Region = {\n    latitude: 5.316667,\n    longitude: -4.033333,\n    latitudeDelta: 0.0922,\n    longitudeDelta: 0.0421,\n  }\n\n  return (\n    <View style={[styles.container, style]}>\n      <MapView\n        style={styles.map}\n        initialRegion={initialRegion || defaultRegion}\n        onRegionChangeComplete={onRegionChange}\n        showsUserLocation\n        showsMyLocationButton\n        showsTraffic={showsTraffic}\n      >\n        {deliveries.map((delivery) => (\n          <React.Fragment key={delivery.id}>\n            <Marker\n              coordinate={{\n                latitude: delivery.pickup_lat,\n                longitude: delivery.pickup_lng,\n              }}\n              title=\"Point de collecte\"\n              description={delivery.pickup_address}\n              pinColor=\"green\"\n            />\n            <Marker\n              coordinate={{\n                latitude: delivery.delivery_lat,\n                longitude: delivery.delivery_lng,\n              }}\n              title=\"Point de livraison\"\n              description={delivery.delivery_address}\n              pinColor=\"red\"\n            />\n          </React.Fragment>\n        ))}\n\n        {trackingPoints.map((point, index) => (\n          <Marker\n            key={`${point.id}-${index}`}\n            coordinate={{\n              latitude: point.lat,\n              longitude: point.lng,\n            }}\n            title={`Point ${index + 1}`}\n            description={point.notes || ''}\n          />\n        ))}\n\n        {route && route.coordinates.length > 0 && (\n          <Polyline\n            coordinates={route.coordinates}\n            strokeColor=\"#007AFF\"\n            strokeWidth={3}\n          />\n        )}\n      </MapView>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  map: {\n    flex: 1,\n  },\n})\n\nexport default CustomMapView\nexport { CustomMapView }\n\nexport type { MapRoute as CustomMapRoute }"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}