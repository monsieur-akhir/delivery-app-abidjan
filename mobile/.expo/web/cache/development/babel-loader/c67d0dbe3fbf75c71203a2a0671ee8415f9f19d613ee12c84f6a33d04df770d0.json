{"ast":null,"code":"export var formatDate = function formatDate(dateString, format) {\n  if (!dateString) return '';\n  try {\n    var date = new Date(dateString);\n    if (isNaN(date.getTime())) return dateString;\n    if (format === 'short') {\n      return date.toLocaleDateString('fr-FR', {\n        day: '2-digit',\n        month: '2-digit',\n        year: 'numeric'\n      });\n    }\n    return date.toLocaleDateString('fr-FR', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  } catch (_unused) {\n    return dateString;\n  }\n};\nexport var formatPrice = function formatPrice(price) {\n  if (typeof price !== 'number' || isNaN(price)) return '0';\n  return new Intl.NumberFormat('fr-FR', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  }).format(price);\n};\nexport var formatDistance = function formatDistance(distanceInMeters) {\n  if (distanceInMeters < 1000) {\n    return Math.round(distanceInMeters) + \"m\";\n  }\n  return (distanceInMeters / 1000).toFixed(1) + \"km\";\n};\nexport var formatDuration = function formatDuration(durationInMinutes) {\n  if (durationInMinutes < 60) {\n    return Math.round(durationInMinutes) + \"min\";\n  }\n  var hours = Math.floor(durationInMinutes / 60);\n  var minutes = Math.round(durationInMinutes % 60);\n  return minutes > 0 ? hours + \"h\" + minutes + \"min\" : hours + \"h\";\n};\nexport var formatPhoneNumber = function formatPhoneNumber(phone) {\n  if (!phone) return '';\n  var digits = phone.replace(/\\D/g, '');\n  if (digits.length === 8) {\n    return digits.replace(/(\\d{2})(\\d{2})(\\d{2})(\\d{2})/, '$1 $2 $3 $4');\n  } else if (digits.length === 10 && digits.startsWith('0')) {\n    return digits.replace(/(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/, '$1 $2 $3 $4 $5');\n  } else if (digits.length >= 10) {\n    return \"+\" + digits;\n  }\n  return phone;\n};\nexport var formatTime = function formatTime(timeString) {\n  if (!timeString) return '';\n  try {\n    var date = new Date(timeString);\n    if (isNaN(date.getTime())) return timeString;\n    return date.toLocaleTimeString('fr-FR', {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  } catch (_unused2) {\n    return timeString;\n  }\n};\nexport var truncateText = function truncateText(text, maxLength) {\n  if (!text || text.length <= maxLength) return text;\n  return text.substring(0, maxLength - 3) + '...';\n};\nexport var formatCurrency = function formatCurrency(amount) {\n  var currency = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'FCFA';\n  return formatPrice(amount) + \" \" + currency;\n};\nexport var formatDistanceKm = function formatDistanceKm(distance) {\n  if (distance < 1000) {\n    return distance.toFixed(0) + \"m\";\n  }\n  return (distance / 1000).toFixed(1) + \"km\";\n};\nexport var formatDate2 = function formatDate2(date) {\n  return new Intl.DateTimeFormat('fr-FR', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  }).format(new Date(date));\n};\nexport var formatTime2 = function formatTime2(date) {\n  return new Intl.DateTimeFormat('fr-FR', {\n    hour: '2-digit',\n    minute: '2-digit'\n  }).format(new Date(date));\n};\nexport var formatRelativeTime = function formatRelativeTime(date) {\n  var now = new Date();\n  var then = new Date(date);\n  var diffInMs = now.getTime() - then.getTime();\n  var diffInMinutes = Math.floor(diffInMs / (1000 * 60));\n  var diffInHours = Math.floor(diffInMinutes / 60);\n  var diffInDays = Math.floor(diffInHours / 24);\n  if (diffInMinutes < 1) return 'À l\\'instant';\n  if (diffInMinutes < 60) return \"Il y a \" + diffInMinutes + \" min\";\n  if (diffInHours < 24) return \"Il y a \" + diffInHours + \"h\";\n  if (diffInDays < 7) return \"Il y a \" + diffInDays + \"j\";\n  return formatDate2(date);\n};","map":{"version":3,"names":["formatDate","dateString","format","date","Date","isNaN","getTime","toLocaleDateString","day","month","year","weekday","_unused","formatPrice","price","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","formatDistance","distanceInMeters","Math","round","toFixed","formatDuration","durationInMinutes","hours","floor","minutes","formatPhoneNumber","phone","digits","replace","length","startsWith","formatTime","timeString","toLocaleTimeString","hour","minute","_unused2","truncateText","text","maxLength","substring","formatCurrency","amount","currency","arguments","undefined","formatDistanceKm","distance","formatDate2","DateTimeFormat","formatTime2","formatRelativeTime","now","then","diffInMs","diffInMinutes","diffInHours","diffInDays"],"sources":["/home/runner/workspace/mobile/utils/formatters.ts"],"sourcesContent":["export const formatDate = (dateString: string, format?: string): string => {\n  if (!dateString) return ''\n\n  try {\n    const date = new Date(dateString)\n    if (isNaN(date.getTime())) return dateString\n\n    if (format === 'short') {\n      return date.toLocaleDateString('fr-FR', {\n        day: '2-digit',\n        month: '2-digit',\n        year: 'numeric'\n      })\n    }\n\n    return date.toLocaleDateString('fr-FR', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    })\n  } catch {\n    return dateString\n  }\n}\n\nexport const formatPrice = (price: number): string => {\n  if (typeof price !== 'number' || isNaN(price)) return '0'\n  return new Intl.NumberFormat('fr-FR', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  }).format(price)\n}\n\nexport const formatDistance = (distanceInMeters: number): string => {\n  if (distanceInMeters < 1000) {\n    return `${Math.round(distanceInMeters)}m`\n  }\n  return `${(distanceInMeters / 1000).toFixed(1)}km`\n}\n\nexport const formatDuration = (durationInMinutes: number): string => {\n  if (durationInMinutes < 60) {\n    return `${Math.round(durationInMinutes)}min`\n  }\n  const hours = Math.floor(durationInMinutes / 60)\n  const minutes = Math.round(durationInMinutes % 60)\n  return minutes > 0 ? `${hours}h${minutes}min` : `${hours}h`\n}\n\nexport const formatPhoneNumber = (phone: string): string => {\n  if (!phone) return ''\n\n  // Remove all non-digit characters\n  const digits = phone.replace(/\\D/g, '')\n\n  // Format based on length\n  if (digits.length === 8) {\n    // Ivorian local number: XX XX XX XX\n    return digits.replace(/(\\d{2})(\\d{2})(\\d{2})(\\d{2})/, '$1 $2 $3 $4')\n  } else if (digits.length === 10 && digits.startsWith('0')) {\n    // Ivorian number with leading 0: 0X XX XX XX XX\n    return digits.replace(/(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/, '$1 $2 $3 $4 $5')\n  } else if (digits.length >= 10) {\n    // International format\n    return `+${digits}`\n  }\n\n  return phone\n}\n\nexport const formatTime = (timeString: string): string => {\n  if (!timeString) return ''\n\n  try {\n    const date = new Date(timeString)\n    if (isNaN(date.getTime())) return timeString\n\n    return date.toLocaleTimeString('fr-FR', {\n      hour: '2-digit',\n      minute: '2-digit'\n    })\n  } catch {\n    return timeString\n  }\n}\n\nexport const truncateText = (text: string, maxLength: number): string => {\n  if (!text || text.length <= maxLength) return text\n  return text.substring(0, maxLength - 3) + '...'\n}\n\nexport const formatCurrency = (amount: number, currency: string = 'FCFA'): string => {\n  return `${formatPrice(amount)} ${currency}`\n}\n\nexport const formatDistanceKm = (distance: number): string => {\n  if (distance < 1000) {\n    return `${distance.toFixed(0)}m`\n  }\n  return `${(distance / 1000).toFixed(1)}km`\n}\n\nexport const formatDate2 = (date: string | Date): string => {\n  return new Intl.DateTimeFormat('fr-FR', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  }).format(new Date(date))\n}\n\nexport const formatTime2 = (date: string | Date): string => {\n  return new Intl.DateTimeFormat('fr-FR', {\n    hour: '2-digit',\n    minute: '2-digit'\n  }).format(new Date(date))\n}\n\nexport const formatRelativeTime = (date: string | Date): string => {\n  const now = new Date()\n  const then = new Date(date)\n  const diffInMs = now.getTime() - then.getTime()\n  const diffInMinutes = Math.floor(diffInMs / (1000 * 60))\n  const diffInHours = Math.floor(diffInMinutes / 60)\n  const diffInDays = Math.floor(diffInHours / 24)\n\n  if (diffInMinutes < 1) return 'À l\\'instant'\n  if (diffInMinutes < 60) return `Il y a ${diffInMinutes} min`\n  if (diffInHours < 24) return `Il y a ${diffInHours}h`\n  if (diffInDays < 7) return `Il y a ${diffInDays}j`\n\n  return formatDate2(date)\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}