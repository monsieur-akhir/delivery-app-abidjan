{"ast":null,"code":"\"use client\";\n\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport useColorScheme from \"react-native-web/dist/exports/useColorScheme\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar defaultColors = {\n  primary: \"#FF6B00\",\n  secondary: \"#FFB74D\",\n  background: \"#FFFFFF\",\n  card: \"#FFFFFF\",\n  text: \"#212121\",\n  border: \"#E0E0E0\",\n  notification: \"#FF6B00\",\n  muted: \"#757575\",\n  surface: \"#FFFFFF\",\n  error: \"#B00020\",\n  placeholder: \"#9E9E9E\"\n};\nvar ThemeContext = createContext({\n  theme: \"light\",\n  currentTheme: \"light\",\n  colors: defaultColors,\n  changeTheme: function () {\n    var _changeTheme = _asyncToGenerator(function* () {});\n    function changeTheme() {\n      return _changeTheme.apply(this, arguments);\n    }\n    return changeTheme;\n  }(),\n  toggleTheme: function () {\n    var _toggleTheme = _asyncToGenerator(function* () {});\n    function toggleTheme() {\n      return _toggleTheme.apply(this, arguments);\n    }\n    return toggleTheme;\n  }()\n});\nexport var useTheme = function useTheme() {\n  return useContext(ThemeContext);\n};\nexport var ThemeProvider = function ThemeProvider(_ref) {\n  var children = _ref.children;\n  var systemColorScheme = useColorScheme() || \"light\";\n  var _useState = useState(\"light\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    theme = _useState2[0],\n    setTheme = _useState2[1];\n  var _useState3 = useState(\"light\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    currentTheme = _useState4[0],\n    setCurrentTheme = _useState4[1];\n  useEffect(function () {\n    var loadTheme = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        try {\n          var savedTheme = yield AsyncStorage.getItem(\"theme\");\n          if (savedTheme) {\n            setTheme(savedTheme);\n          }\n        } catch (error) {\n          console.error(\"Error loading theme:\", error);\n        }\n      });\n      return function loadTheme() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    loadTheme();\n  }, []);\n  useEffect(function () {\n    if (theme === \"system\") {\n      setCurrentTheme(systemColorScheme);\n    } else {\n      setCurrentTheme(theme);\n    }\n  }, [theme, systemColorScheme]);\n  var changeTheme = function () {\n    var _ref3 = _asyncToGenerator(function* (newTheme) {\n      try {\n        yield AsyncStorage.setItem(\"theme\", newTheme);\n        setTheme(newTheme);\n      } catch (error) {\n        console.error(\"Error saving theme:\", error);\n      }\n    });\n    return function changeTheme(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var toggleTheme = function () {\n    var _ref4 = _asyncToGenerator(function* () {\n      var newTheme = currentTheme === \"light\" ? \"dark\" : \"light\";\n      yield changeTheme(newTheme);\n    });\n    return function toggleTheme() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var colors = {\n    light: {\n      primary: \"#FF6B00\",\n      secondary: \"#FFB74D\",\n      background: \"#FFFFFF\",\n      surface: \"#F5F5F5\",\n      error: \"#B00020\",\n      text: \"#212121\",\n      muted: \"#757575\",\n      placeholder: \"#9E9E9E\",\n      border: \"#E0E0E0\",\n      card: \"#FFFFFF\",\n      notification: \"#FF6B00\"\n    },\n    dark: {\n      primary: \"#FF6B00\",\n      secondary: \"#FFB74D\",\n      background: \"#121212\",\n      surface: \"#1E1E1E\",\n      error: \"#CF6679\",\n      text: \"#FFFFFF\",\n      muted: \"#B0B0B0\",\n      placeholder: \"#6C6C6C\",\n      border: \"#2C2C2C\",\n      card: \"#1E1E1E\",\n      notification: \"#FF6B00\"\n    }\n  };\n  return _jsx(ThemeContext.Provider, {\n    value: {\n      theme: theme,\n      currentTheme: currentTheme,\n      colors: colors[currentTheme],\n      changeTheme: changeTheme,\n      toggleTheme: toggleTheme\n    },\n    children: children\n  });\n};","map":{"version":3,"names":["_slicedToArray","_asyncToGenerator","createContext","useContext","useState","useEffect","useColorScheme","AsyncStorage","jsx","_jsx","defaultColors","primary","secondary","background","card","text","border","notification","muted","surface","error","placeholder","ThemeContext","theme","currentTheme","colors","changeTheme","_changeTheme","apply","arguments","toggleTheme","_toggleTheme","useTheme","ThemeProvider","_ref","children","systemColorScheme","_useState","_useState2","setTheme","_useState3","_useState4","setCurrentTheme","loadTheme","_ref2","savedTheme","getItem","console","_ref3","newTheme","setItem","_x","_ref4","light","dark","Provider","value"],"sources":["/home/runner/workspace/mobile/contexts/ThemeContext.tsx"],"sourcesContent":["\"use client\"\n\nimport type React from \"react\"\nimport { createContext, useContext, useState, useEffect, type ReactNode } from \"react\"\nimport { useColorScheme } from \"react-native\"\nimport AsyncStorage from \"@react-native-async-storage/async-storage\"\nimport type { ThemeColors } from \"../types/theme\"\n\ntype ThemeType = \"light\" | \"dark\" | \"system\"\ntype CurrentThemeType = \"light\" | \"dark\"\n\ninterface ThemeContextType {\n  theme: ThemeType\n  currentTheme: CurrentThemeType\n  colors: ThemeColors\n  changeTheme: (newTheme: ThemeType) => Promise<void>\n  toggleTheme: () => Promise<void>\n}\n\ninterface ThemeProviderProps {\n  children: ReactNode\n}\n\nconst defaultColors: ThemeColors = {\n  primary: \"#FF6B00\",\n  secondary: \"#FFB74D\",\n  background: \"#FFFFFF\",\n  card: \"#FFFFFF\",\n  text: \"#212121\",\n  border: \"#E0E0E0\",\n  notification: \"#FF6B00\",\n  muted: \"#757575\",\n  surface: \"#FFFFFF\",\n  error: \"#B00020\",\n  placeholder: \"#9E9E9E\",\n}\n\nconst ThemeContext = createContext<ThemeContextType>({\n  theme: \"light\",\n  currentTheme: \"light\",\n  colors: defaultColors,\n  changeTheme: async () => {},\n  toggleTheme: async () => {},\n})\n\nexport const useTheme = (): ThemeContextType => {\n  return useContext(ThemeContext)\n}\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  const systemColorScheme = (useColorScheme() as CurrentThemeType) || \"light\"\n  const [theme, setTheme] = useState<ThemeType>(\"light\")\n  const [currentTheme, setCurrentTheme] = useState<CurrentThemeType>(\"light\")\n\n  // Charger le thème sauvegardé\n  useEffect(() => {\n    const loadTheme = async () => {\n      try {\n        const savedTheme = await AsyncStorage.getItem(\"theme\")\n        if (savedTheme) {\n          setTheme(savedTheme as ThemeType)\n        }\n      } catch (error) {\n        console.error(\"Error loading theme:\", error)\n      }\n    }\n\n    loadTheme()\n  }, [])\n\n  // Mettre à jour le thème actuel en fonction du thème choisi et du thème système\n  useEffect(() => {\n    if (theme === \"system\") {\n      setCurrentTheme(systemColorScheme)\n    } else {\n      setCurrentTheme(theme as CurrentThemeType)\n    }\n  }, [theme, systemColorScheme])\n\n  // Changer le thème\n  const changeTheme = async (newTheme: ThemeType): Promise<void> => {\n    try {\n      await AsyncStorage.setItem(\"theme\", newTheme)\n      setTheme(newTheme)\n    } catch (error) {\n      console.error(\"Error saving theme:\", error)\n    }\n  }\n\n  // Basculer entre les thèmes clair et sombre\n  const toggleTheme = async (): Promise<void> => {\n    const newTheme = currentTheme === \"light\" ? \"dark\" : \"light\"\n    await changeTheme(newTheme)\n  }\n\n  // Couleurs pour le thème actuel\n  const colors: Record<CurrentThemeType, ThemeColors> = {\n    light: {\n      primary: \"#FF6B00\",\n      secondary: \"#FFB74D\",\n      background: \"#FFFFFF\",\n      surface: \"#F5F5F5\",\n      error: \"#B00020\",\n      text: \"#212121\",\n      muted: \"#757575\",\n      placeholder: \"#9E9E9E\",\n      border: \"#E0E0E0\",\n      card: \"#FFFFFF\",\n      notification: \"#FF6B00\",\n    },\n    dark: {\n      primary: \"#FF6B00\",\n      secondary: \"#FFB74D\",\n      background: \"#121212\",\n      surface: \"#1E1E1E\",\n      error: \"#CF6679\",\n      text: \"#FFFFFF\",\n      muted: \"#B0B0B0\",\n      placeholder: \"#6C6C6C\",\n      border: \"#2C2C2C\",\n      card: \"#1E1E1E\",\n      notification: \"#FF6B00\",\n    },\n  }\n\n  return (\n    <ThemeContext.Provider\n      value={{\n        theme,\n        currentTheme,\n        colors: colors[currentTheme],\n        changeTheme,\n        toggleTheme,\n      }}\n    >\n      {children}\n    </ThemeContext.Provider>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}