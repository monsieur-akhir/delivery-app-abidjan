{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport MapView, { Marker, Polyline, PROVIDER_DEFAULT } from 'react-native-maps';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { getDirections, getTrafficInfo } from \"../services/api\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar _Dimensions$get = Dimensions.get('window'),\n  width = _Dimensions$get.width,\n  height = _Dimensions$get.height;\nvar ASPECT_RATIO = width / height;\nvar LATITUDE_DELTA = 0.0922;\nvar LONGITUDE_DELTA = LATITUDE_DELTA * ASPECT_RATIO;\nvar CustomMapView = function CustomMapView(_ref) {\n  var initialRegion = _ref.initialRegion,\n    pickupPoint = _ref.pickupPoint,\n    deliveryPoint = _ref.deliveryPoint,\n    pickupLocation = _ref.pickupLocation,\n    deliveryLocation = _ref.deliveryLocation,\n    courierLocation = _ref.courierLocation,\n    onPickupPointSelected = _ref.onPickupPointSelected,\n    onDeliveryPointSelected = _ref.onDeliveryPointSelected,\n    onPickupLocationChange = _ref.onPickupLocationChange,\n    onDeliveryLocationChange = _ref.onDeliveryLocationChange,\n    onRegionChange = _ref.onRegionChange,\n    onRouteCalculated = _ref.onRouteCalculated,\n    onTrafficUpdate = _ref.onTrafficUpdate,\n    _ref$showUserLocation = _ref.showUserLocation,\n    showUserLocation = _ref$showUserLocation === void 0 ? true : _ref$showUserLocation,\n    _ref$showsUserLocatio = _ref.showsUserLocation,\n    showsUserLocation = _ref$showsUserLocatio === void 0 ? true : _ref$showsUserLocatio,\n    _ref$showTraffic = _ref.showTraffic,\n    showTraffic = _ref$showTraffic === void 0 ? false : _ref$showTraffic,\n    _ref$showsTraffic = _ref.showsTraffic,\n    showsTraffic = _ref$showsTraffic === void 0 ? false : _ref$showsTraffic,\n    _ref$isInteractive = _ref.isInteractive,\n    isInteractive = _ref$isInteractive === void 0 ? true : _ref$isInteractive,\n    route = _ref.route,\n    _ref$markers = _ref.markers,\n    markers = _ref$markers === void 0 ? [] : _ref$markers,\n    style = _ref.style;\n  var _useState = useState(initialRegion || {\n      latitude: 5.3599517,\n      longitude: -4.0082563,\n      latitudeDelta: LATITUDE_DELTA,\n      longitudeDelta: LONGITUDE_DELTA\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    region = _useState2[0],\n    setRegion = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    calculatedRoute = _useState4[0],\n    setCalculatedRoute = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    trafficInfo = _useState6[0],\n    setTrafficInfo = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    loading = _useState8[0],\n    setLoading = _useState8[1];\n  var mapRef = useRef(null);\n  useEffect(function () {\n    var calculateRoute = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        var pickup = pickupLocation || pickupPoint;\n        var delivery = deliveryLocation || deliveryPoint;\n        if (!pickup || !delivery) return;\n        try {\n          setLoading(true);\n          var directions = yield getDirections(pickup.latitude, pickup.longitude, delivery.latitude, delivery.longitude);\n          if (directions && directions.coordinates) {\n            var routeData = {\n              coordinates: directions.coordinates,\n              distance: directions.distance || 0,\n              duration: directions.duration || 0,\n              instructions: directions.instructions || []\n            };\n            setCalculatedRoute(routeData);\n            if (onRouteCalculated) {\n              onRouteCalculated(routeData);\n            }\n            if (showTraffic || showsTraffic) {\n              var traffic = yield getTrafficInfo(pickup.latitude, pickup.longitude, delivery.latitude, delivery.longitude);\n              if (traffic) {\n                var durationMinutes = Math.round(traffic.duration / 60);\n                var level = 'low';\n                var speedKmh = traffic.distance / 1000 / (traffic.duration / 3600);\n                if (speedKmh < 10) {\n                  level = 'severe';\n                } else if (speedKmh < 20) {\n                  level = 'high';\n                } else if (speedKmh < 30) {\n                  level = 'moderate';\n                }\n                var trafficData = {\n                  level: level,\n                  delay: Math.max(0, durationMinutes - traffic.distance / 1000 * 2),\n                  description: \"Route de \" + (traffic.distance / 1000).toFixed(1) + \" km, dur\\xE9e estim\\xE9e \" + durationMinutes + \" min\"\n                };\n                setTrafficInfo(trafficData);\n                if (onTrafficUpdate) {\n                  onTrafficUpdate(trafficData);\n                }\n              }\n            }\n          }\n        } catch (error) {\n          console.error('Error calculating route:', error);\n        } finally {\n          setLoading(false);\n        }\n      });\n      return function calculateRoute() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    calculateRoute();\n  }, [pickupLocation, deliveryLocation, pickupPoint, deliveryPoint, showTraffic, showsTraffic, onRouteCalculated, onTrafficUpdate]);\n  var handleRegionChange = function handleRegionChange(newRegion) {\n    setRegion(newRegion);\n    if (onRegionChange) {\n      onRegionChange(newRegion);\n    }\n  };\n  var handlePickupDrag = function handlePickupDrag(e) {\n    var coordinate = e.nativeEvent.coordinate;\n    if (onPickupLocationChange) {\n      onPickupLocationChange(coordinate);\n    }\n    if (onPickupPointSelected) {\n      onPickupPointSelected(coordinate);\n    }\n  };\n  var handleDeliveryDrag = function handleDeliveryDrag(e) {\n    var coordinate = e.nativeEvent.coordinate;\n    if (onDeliveryLocationChange) {\n      onDeliveryLocationChange(coordinate);\n    }\n    if (onDeliveryPointSelected) {\n      onDeliveryPointSelected(coordinate);\n    }\n  };\n  var fitToCoordinates = function fitToCoordinates() {\n    var pickup = pickupLocation || pickupPoint;\n    var delivery = deliveryLocation || deliveryPoint;\n    if (mapRef.current && pickup && delivery) {\n      var coordinates = [pickup, delivery];\n      if (courierLocation) {\n        coordinates.push(courierLocation);\n      }\n      mapRef.current.fitToCoordinates(coordinates, {\n        edgePadding: {\n          top: 50,\n          right: 50,\n          bottom: 50,\n          left: 50\n        },\n        animated: true\n      });\n    }\n  };\n  return _jsxs(View, {\n    style: [styles.container, style],\n    children: [_jsxs(MapView, {\n      ref: mapRef,\n      style: styles.map,\n      provider: PROVIDER_DEFAULT,\n      region: region,\n      onRegionChangeComplete: handleRegionChange,\n      showsUserLocation: showUserLocation || showsUserLocation,\n      showsTraffic: showTraffic || showsTraffic,\n      scrollEnabled: isInteractive,\n      zoomEnabled: isInteractive,\n      rotateEnabled: isInteractive,\n      pitchEnabled: isInteractive,\n      children: [(pickupLocation || pickupPoint) && _jsx(Marker, {\n        coordinate: pickupLocation || pickupPoint,\n        title: (pickupPoint == null ? void 0 : pickupPoint.title) || \"Point de ramassage\",\n        description: (pickupPoint == null ? void 0 : pickupPoint.description) || \"\",\n        pinColor: \"#FF6B00\",\n        draggable: isInteractive,\n        onDragEnd: handlePickupDrag\n      }), (deliveryLocation || deliveryPoint) && _jsx(Marker, {\n        coordinate: deliveryLocation || deliveryPoint,\n        title: (deliveryPoint == null ? void 0 : deliveryPoint.title) || \"Point de livraison\",\n        description: (deliveryPoint == null ? void 0 : deliveryPoint.description) || \"\",\n        pinColor: \"#4CAF50\",\n        draggable: isInteractive,\n        onDragEnd: handleDeliveryDrag\n      }), courierLocation && _jsx(Marker, {\n        coordinate: courierLocation,\n        title: \"Coursier\",\n        pinColor: \"#2196F3\"\n      }), markers.map(function (marker) {\n        return _jsx(Marker, {\n          coordinate: marker.coordinate,\n          title: marker.title,\n          description: marker.description,\n          pinColor: marker.type === 'pickup' ? '#FF6B00' : marker.type === 'delivery' ? '#4CAF50' : marker.type === 'courier' ? '#2196F3' : '#9C27B0'\n        }, marker.id);\n      }), (calculatedRoute || route) && _jsx(Polyline, {\n        coordinates: (route == null ? void 0 : route.coordinates) || (calculatedRoute == null ? void 0 : calculatedRoute.coordinates) || [],\n        strokeColor: (trafficInfo == null ? void 0 : trafficInfo.level) === 'severe' ? '#FF0000' : (trafficInfo == null ? void 0 : trafficInfo.level) === 'high' ? '#FF4500' : (trafficInfo == null ? void 0 : trafficInfo.level) === 'moderate' ? '#FFA500' : '#0000FF',\n        strokeWidth: 4\n      })]\n    }), _jsxs(View, {\n      style: styles.controls,\n      children: [loading && _jsxs(TouchableOpacity, {\n        style: styles.loadingButton,\n        disabled: true,\n        children: [_jsx(ActivityIndicator, {\n          size: \"small\",\n          color: \"#fff\"\n        }), _jsx(Text, {\n          style: styles.buttonText,\n          children: \"Calcul...\"\n        })]\n      }), _jsx(TouchableOpacity, {\n        style: styles.centerButton,\n        onPress: fitToCoordinates,\n        children: _jsx(MaterialIcons, {\n          name: \"center-focus-strong\",\n          size: 24,\n          color: \"#fff\"\n        })\n      })]\n    }), trafficInfo && _jsx(View, {\n      style: styles.trafficInfo,\n      children: _jsxs(Text, {\n        style: styles.trafficText,\n        children: [\"Trafic: \", trafficInfo.level, \" - D\\xE9lai: \", trafficInfo.delay, \" min\"]\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  map: {\n    flex: 1\n  },\n  controls: {\n    position: 'absolute',\n    bottom: 20,\n    right: 20,\n    flexDirection: 'column',\n    gap: 10\n  },\n  centerButton: {\n    backgroundColor: '#2196F3',\n    padding: 12,\n    borderRadius: 25,\n    elevation: 5,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84\n  },\n  loadingButton: {\n    backgroundColor: '#FF6B00',\n    padding: 12,\n    borderRadius: 25,\n    elevation: 5,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8\n  },\n  buttonText: {\n    color: '#fff',\n    fontSize: 12,\n    fontWeight: 'bold'\n  },\n  trafficInfo: {\n    position: 'absolute',\n    top: 20,\n    left: 20,\n    right: 20,\n    backgroundColor: 'rgba(0, 0, 0, 0.8)',\n    padding: 10,\n    borderRadius: 8\n  },\n  trafficText: {\n    color: '#fff',\n    fontSize: 14,\n    textAlign: 'center'\n  }\n});\nexport default CustomMapView;","map":{"version":3,"names":["React","useState","useEffect","useRef","View","StyleSheet","Dimensions","TouchableOpacity","Text","ActivityIndicator","MapView","Marker","Polyline","PROVIDER_DEFAULT","MaterialIcons","getDirections","getTrafficInfo","jsx","_jsx","jsxs","_jsxs","_Dimensions$get","get","width","height","ASPECT_RATIO","LATITUDE_DELTA","LONGITUDE_DELTA","CustomMapView","_ref","initialRegion","pickupPoint","deliveryPoint","pickupLocation","deliveryLocation","courierLocation","onPickupPointSelected","onDeliveryPointSelected","onPickupLocationChange","onDeliveryLocationChange","onRegionChange","onRouteCalculated","onTrafficUpdate","_ref$showUserLocation","showUserLocation","_ref$showsUserLocatio","showsUserLocation","_ref$showTraffic","showTraffic","_ref$showsTraffic","showsTraffic","_ref$isInteractive","isInteractive","route","_ref$markers","markers","style","_useState","latitude","longitude","latitudeDelta","longitudeDelta","_useState2","_slicedToArray","region","setRegion","_useState3","_useState4","calculatedRoute","setCalculatedRoute","_useState5","_useState6","trafficInfo","setTrafficInfo","_useState7","_useState8","loading","setLoading","mapRef","calculateRoute","_ref2","_asyncToGenerator","pickup","delivery","directions","coordinates","routeData","distance","duration","instructions","traffic","durationMinutes","Math","round","level","speedKmh","trafficData","delay","max","description","toFixed","error","console","apply","arguments","handleRegionChange","newRegion","handlePickupDrag","e","coordinate","nativeEvent","handleDeliveryDrag","fitToCoordinates","current","push","edgePadding","top","right","bottom","left","animated","styles","container","children","ref","map","provider","onRegionChangeComplete","scrollEnabled","zoomEnabled","rotateEnabled","pitchEnabled","title","pinColor","draggable","onDragEnd","marker","type","id","strokeColor","strokeWidth","controls","loadingButton","disabled","size","color","buttonText","centerButton","onPress","name","trafficText","create","flex","position","flexDirection","gap","backgroundColor","padding","borderRadius","elevation","shadowColor","shadowOffset","shadowOpacity","shadowRadius","alignItems","fontSize","fontWeight","textAlign"],"sources":["/home/runner/workspace/mobile/components/MapView.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport {\n  View,\n  StyleSheet,\n  Dimensions,\n  TouchableOpacity,\n  Text,\n  ActivityIndicator\n} from 'react-native'\nimport MapView, { \n  Marker, \n  Polyline, \n  PROVIDER_DEFAULT,\n  LatLng,\n  Region,\n  MarkerDragStartEndEvent\n} from 'react-native-maps'\nimport { MaterialIcons } from '@expo/vector-icons'\nimport { getDirections, getTrafficInfo } from '../services/api'\n\nconst { width, height } = Dimensions.get('window')\nconst ASPECT_RATIO = width / height\nconst LATITUDE_DELTA = 0.0922\nconst LONGITUDE_DELTA = LATITUDE_DELTA * ASPECT_RATIO\n\n// Interface pour les coordonnées\nexport interface Coordinates {\n  latitude: number\n  longitude: number\n}\n\n// Interface pour les points d'intérêt\nexport interface MapPoint {\n  id: string\n  coordinate: Coordinates\n  title: string\n  description?: string\n  type: 'pickup' | 'delivery' | 'courier' | 'poi'\n}\n\n// Interface pour les routes\nexport interface Route {\n  coordinates: LatLng[]\n  distance: number\n  duration: number\n  instructions: string[]\n}\n\n// Interface pour les informations de trafic\nexport interface TrafficInfo {\n  level: 'low' | 'moderate' | 'high' | 'severe'\n  delay: number\n  description: string\n}\n\n// Props du composant\nexport interface MapViewProps {\n  initialRegion?: Region\n  pickupPoint?: Coordinates & { title: string; description: string }\n  deliveryPoint?: Coordinates & { title: string; description: string }\n  pickupLocation?: Coordinates\n  deliveryLocation?: Coordinates\n  courierLocation?: Coordinates\n  onPickupPointSelected?: (coordinate: Coordinates) => void\n  onDeliveryPointSelected?: (coordinate: Coordinates) => void\n  onPickupLocationChange?: (location: Coordinates) => void\n  onDeliveryLocationChange?: (location: Coordinates) => void\n  onRegionChange?: (region: Region) => void\n  onRouteCalculated?: (route: Route) => void\n  onTrafficUpdate?: (traffic: TrafficInfo) => void\n  showUserLocation?: boolean\n  showsUserLocation?: boolean\n  showTraffic?: boolean\n  showsTraffic?: boolean\n  isInteractive?: boolean\n  route?: Route\n  markers?: MapPoint[]\n  style?: object\n}\n\nconst CustomMapView: React.FC<MapViewProps> = ({\n  initialRegion,\n  pickupPoint,\n  deliveryPoint,\n  pickupLocation,\n  deliveryLocation,\n  courierLocation,\n  onPickupPointSelected,\n  onDeliveryPointSelected,\n  onPickupLocationChange,\n  onDeliveryLocationChange,\n  onRegionChange,\n  onRouteCalculated,\n  onTrafficUpdate,\n  showUserLocation = true,\n  showsUserLocation = true,\n  showTraffic = false,\n  showsTraffic = false,\n  isInteractive = true,\n  route,\n  markers = [],\n  style\n}) => {\n  // States\n  const [region, setRegion] = useState<Region>(\n    initialRegion || {\n      latitude: 5.3599517,\n      longitude: -4.0082563,\n      latitudeDelta: LATITUDE_DELTA,\n      longitudeDelta: LONGITUDE_DELTA,\n    }\n  )\n  const [calculatedRoute, setCalculatedRoute] = useState<Route | null>(null)\n  const [trafficInfo, setTrafficInfo] = useState<TrafficInfo | null>(null)\n  const [loading, setLoading] = useState(false)\n  // Refs\n  const mapRef = useRef<MapView>(null)\n\n  // Effect pour calculer la route\n  useEffect(() => {\n    const calculateRoute = async () => {\n      const pickup = pickupLocation || pickupPoint\n      const delivery = deliveryLocation || deliveryPoint\n      \n      if (!pickup || !delivery) return\n\n      try {\n        setLoading(true)\n        const directions = await getDirections(\n          pickup.latitude,\n          pickup.longitude,\n          delivery.latitude,\n          delivery.longitude\n        )\n\n        if (directions && directions.coordinates) {\n          const routeData: Route = {\n            coordinates: directions.coordinates,\n            distance: directions.distance || 0,\n            duration: directions.duration || 0,\n            instructions: directions.instructions || [],\n          }\n          setCalculatedRoute(routeData)\n          \n          if (onRouteCalculated) {\n            onRouteCalculated(routeData)\n          }\n\n          // Obtenir les infos de trafic\n          if (showTraffic || showsTraffic) {            const traffic = await getTrafficInfo(\n              pickup.latitude,\n              pickup.longitude,\n              delivery.latitude,\n              delivery.longitude\n            )\n\n            if (traffic) {\n              // Transform API response to TrafficInfo format\n              const durationMinutes = Math.round(traffic.duration / 60)\n              let level: 'low' | 'moderate' | 'high' | 'severe' = 'low'\n              \n              // Determine traffic level based on duration and distance\n              const speedKmh = (traffic.distance / 1000) / (traffic.duration / 3600)\n              if (speedKmh < 10) {\n                level = 'severe'\n              } else if (speedKmh < 20) {\n                level = 'high'\n              } else if (speedKmh < 30) {\n                level = 'moderate'\n              }\n              \n              const trafficData: TrafficInfo = {\n                level,\n                delay: Math.max(0, durationMinutes - (traffic.distance / 1000) * 2), // Estimate delay based on normal travel time\n                description: `Route de ${(traffic.distance / 1000).toFixed(1)} km, durée estimée ${durationMinutes} min`,\n              }\n              setTrafficInfo(trafficData)\n              \n              if (onTrafficUpdate) {\n                onTrafficUpdate(trafficData)\n              }\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error calculating route:', error)\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    calculateRoute()\n  }, [pickupLocation, deliveryLocation, pickupPoint, deliveryPoint, showTraffic, showsTraffic, onRouteCalculated, onTrafficUpdate])\n\n  // Gestionnaire de changement de région\n  const handleRegionChange = (newRegion: Region) => {\n    setRegion(newRegion)\n    if (onRegionChange) {\n      onRegionChange(newRegion)\n    }\n  }\n\n  // Gestionnaire de drag des marqueurs\n  const handlePickupDrag = (e: MarkerDragStartEndEvent) => {\n    const coordinate = e.nativeEvent.coordinate\n    if (onPickupLocationChange) {\n      onPickupLocationChange(coordinate)\n    }\n    if (onPickupPointSelected) {\n      onPickupPointSelected(coordinate)\n    }\n  }\n\n  const handleDeliveryDrag = (e: MarkerDragStartEndEvent) => {\n    const coordinate = e.nativeEvent.coordinate\n    if (onDeliveryLocationChange) {\n      onDeliveryLocationChange(coordinate)\n    }\n    if (onDeliveryPointSelected) {\n      onDeliveryPointSelected(coordinate)\n    }\n  }\n\n  // Fonction pour centrer la carte sur tous les points\n  const fitToCoordinates = () => {\n    const pickup = pickupLocation || pickupPoint\n    const delivery = deliveryLocation || deliveryPoint\n    \n    if (mapRef.current && pickup && delivery) {\n      const coordinates = [pickup, delivery]\n      if (courierLocation) {\n        coordinates.push(courierLocation)\n      }\n      \n      mapRef.current.fitToCoordinates(coordinates, {\n        edgePadding: { top: 50, right: 50, bottom: 50, left: 50 },\n        animated: true,\n      })\n    }\n  }\n\n  return (\n    <View style={[styles.container, style]}>\n      <MapView\n        ref={mapRef}\n        style={styles.map}\n        provider={PROVIDER_DEFAULT}\n        region={region}\n        onRegionChangeComplete={handleRegionChange}\n        showsUserLocation={showUserLocation || showsUserLocation}\n        showsTraffic={showTraffic || showsTraffic}\n        scrollEnabled={isInteractive}\n        zoomEnabled={isInteractive}\n        rotateEnabled={isInteractive}\n        pitchEnabled={isInteractive}\n      >\n        {/* Marqueur de ramassage */}\n        {(pickupLocation || pickupPoint) && (\n          <Marker\n            coordinate={pickupLocation || pickupPoint!}\n            title={pickupPoint?.title || \"Point de ramassage\"}\n            description={pickupPoint?.description || \"\"}\n            pinColor=\"#FF6B00\"\n            draggable={isInteractive}\n            onDragEnd={handlePickupDrag}\n          />\n        )}\n\n        {/* Marqueur de livraison */}\n        {(deliveryLocation || deliveryPoint) && (\n          <Marker\n            coordinate={deliveryLocation || deliveryPoint!}\n            title={deliveryPoint?.title || \"Point de livraison\"}\n            description={deliveryPoint?.description || \"\"}\n            pinColor=\"#4CAF50\"\n            draggable={isInteractive}\n            onDragEnd={handleDeliveryDrag}\n          />\n        )}\n\n        {/* Marqueur du coursier */}\n        {courierLocation && (\n          <Marker\n            coordinate={courierLocation}\n            title=\"Coursier\"\n            pinColor=\"#2196F3\"\n          />\n        )}\n\n        {/* Marqueurs personnalisés */}\n        {markers.map((marker) => (\n          <Marker\n            key={marker.id}\n            coordinate={marker.coordinate}\n            title={marker.title}\n            description={marker.description}\n            pinColor={\n              marker.type === 'pickup' ? '#FF6B00' :\n              marker.type === 'delivery' ? '#4CAF50' :\n              marker.type === 'courier' ? '#2196F3' : '#9C27B0'\n            }\n          />\n        ))}\n\n        {/* Route calculée */}\n        {(calculatedRoute || route) && (\n          <Polyline\n            coordinates={(route?.coordinates || calculatedRoute?.coordinates) || []}\n            strokeColor={\n              trafficInfo?.level === 'severe' ? '#FF0000' :\n              trafficInfo?.level === 'high' ? '#FF4500' :\n              trafficInfo?.level === 'moderate' ? '#FFA500' : '#0000FF'\n            }\n            strokeWidth={4}\n          />\n        )}\n      </MapView>\n\n      {/* Contrôles de la carte */}\n      <View style={styles.controls}>\n        {loading && (\n          <TouchableOpacity style={styles.loadingButton} disabled>\n            <ActivityIndicator size=\"small\" color=\"#fff\" />\n            <Text style={styles.buttonText}>Calcul...</Text>\n          </TouchableOpacity>\n        )}\n        \n        <TouchableOpacity style={styles.centerButton} onPress={fitToCoordinates}>\n          <MaterialIcons name=\"center-focus-strong\" size={24} color=\"#fff\" />\n        </TouchableOpacity>\n      </View>\n\n      {/* Informations de trafic */}\n      {trafficInfo && (\n        <View style={styles.trafficInfo}>\n          <Text style={styles.trafficText}>\n            Trafic: {trafficInfo.level} - Délai: {trafficInfo.delay} min\n          </Text>\n        </View>\n      )}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  map: {\n    flex: 1,\n  },\n  controls: {\n    position: 'absolute',\n    bottom: 20,\n    right: 20,\n    flexDirection: 'column',\n    gap: 10,\n  },\n  centerButton: {\n    backgroundColor: '#2196F3',\n    padding: 12,\n    borderRadius: 25,\n    elevation: 5,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n  },\n  loadingButton: {\n    backgroundColor: '#FF6B00',\n    padding: 12,\n    borderRadius: 25,\n    elevation: 5,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n  },\n  buttonText: {\n    color: '#fff',\n    fontSize: 12,\n    fontWeight: 'bold',\n  },\n  trafficInfo: {\n    position: 'absolute',\n    top: 20,\n    left: 20,\n    right: 20,\n    backgroundColor: 'rgba(0, 0, 0, 0.8)',\n    padding: 10,    borderRadius: 8,\n  },  trafficText: {\n    color: '#fff',\n    fontSize: 14,\n    textAlign: 'center',\n  },\n})\n\nexport default CustomMapView\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}