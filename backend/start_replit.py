
#!/usr/bin/env python3
"""
Script de d√©marrage pour Replit Cloud Run
Optimis√© pour l'environnement de d√©ploiement sans virtual environment
"""

import os
import sys
import asyncio
from pathlib import Path

# Ajouter le r√©pertoire backend au PYTHONPATH
backend_dir = Path(__file__).parent
sys.path.insert(0, str(backend_dir))

# Configuration des variables d'environnement pour le d√©ploiement
os.environ.setdefault("ENVIRONMENT", "production")
os.environ.setdefault("DEBUG", "false")
os.environ.setdefault("HOST", "0.0.0.0")
os.environ.setdefault("PORT", "8000")

async def init_database():
    """Initialise la base de donn√©es si n√©cessaire"""
    try:
        from app.db.init_db import init_db
        await init_db()
        print("‚úÖ Base de donn√©es initialis√©e")
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur lors de l'initialisation de la DB: {e}")

def main():
    """Point d'entr√©e principal"""
    try:
        # Initialisation de la base de donn√©es
        asyncio.run(init_database())
        
        # Import et d√©marrage de l'application
        from app.main import app
        import uvicorn
        
        # Configuration du serveur
        host = os.getenv("HOST", "0.0.0.0")
        port = int(os.getenv("PORT", 8000))
        
        print(f"üöÄ D√©marrage du serveur sur {host}:{port}")
        
        # D√©marrage avec uvicorn
        uvicorn.run(
            app,
            host=host,
            port=port,
            log_level="info",
            access_log=True
        )
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        print("V√©rification des d√©pendances...")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Erreur de d√©marrage: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
