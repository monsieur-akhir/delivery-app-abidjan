"""update_multi_destination_models

Revision ID: 19a5320c0be6
Revises: 4389212cf6e7
Create Date: 2025-06-24 15:37:56.716661

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '19a5320c0be6'
down_revision = '4389212cf6e7'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Supprimer d'abord les tables qui dépendent d'autres tables
    op.drop_index('ix_promotion_usages_id', table_name='promotion_usages')
    op.drop_table('promotion_usages')
    
    op.drop_index('ix_zone_pricing_rules_id', table_name='zone_pricing_rules')
    op.drop_table('zone_pricing_rules')
    
    op.drop_index('ix_zone_restrictions_id', table_name='zone_restrictions')
    op.drop_table('zone_restrictions')
    
    # Puis les tables principales
    op.drop_index('ix_zones_id', table_name='zones')
    op.execute('DROP TABLE IF EXISTS zones CASCADE')
    
    op.drop_index('ix_promotions_id', table_name='promotions')
    op.execute('DROP TABLE IF EXISTS promotions CASCADE')
    
    op.drop_index('ix_referral_programs_id', table_name='referral_programs')
    op.execute('DROP TABLE IF EXISTS referral_programs CASCADE')
    
    op.drop_index('ix_otps_email', table_name='otps')
    op.drop_index('ix_otps_id', table_name='otps')
    op.drop_index('ix_otps_phone', table_name='otps')
    op.execute('DROP TABLE IF EXISTS otps CASCADE')

    # Modifications de multi_destination_deliveries
    op.add_column('multi_destination_deliveries', sa.Column('optimized_route', sa.JSON(), nullable=True))
    op.add_column('multi_destination_deliveries', sa.Column('estimated_total_distance', sa.Float(), nullable=True))
    op.add_column('multi_destination_deliveries', sa.Column('estimated_total_duration', sa.Integer(), nullable=True))
    op.add_column('multi_destination_deliveries', sa.Column('actual_total_duration', sa.Integer(), nullable=True))
    op.add_column('multi_destination_deliveries', sa.Column('total_final_price', sa.Float(), nullable=True))
    op.add_column('multi_destination_deliveries', sa.Column('accepted_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('multi_destination_deliveries', sa.Column('started_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('multi_destination_deliveries', sa.Column('cancelled_at', sa.DateTime(timezone=True), nullable=True))
    
    # Modification du type de completed_at
    op.alter_column('multi_destination_deliveries', 'completed_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    
    # Suppression des anciennes colonnes
    op.drop_column('multi_destination_deliveries', 'total_price')
    op.drop_column('multi_destination_deliveries', 'price_per_destination')
    op.drop_column('multi_destination_deliveries', 'current_destination_index')
    op.drop_column('multi_destination_deliveries', 'completed_destinations')
    op.drop_column('multi_destination_deliveries', 'estimated_duration')
    op.drop_column('multi_destination_deliveries', 'actual_start_time')
    op.drop_column('multi_destination_deliveries', 'scheduled_start_time')
    op.drop_column('multi_destination_deliveries', 'updated_at')

    # Modifications de multi_destination_stops
    op.add_column('multi_destination_stops', sa.Column('original_order', sa.Integer(), nullable=False, server_default='1'))
    op.add_column('multi_destination_stops', sa.Column('optimized_order', sa.Integer(), nullable=True))
    op.add_column('multi_destination_stops', sa.Column('delivery_address', sa.String(length=500), nullable=False, server_default=''))
    op.add_column('multi_destination_stops', sa.Column('delivery_commune', sa.String(length=100), nullable=True))
    op.add_column('multi_destination_stops', sa.Column('delivery_lat', sa.Float(), nullable=True))
    op.add_column('multi_destination_stops', sa.Column('delivery_lng', sa.Float(), nullable=True))
    op.add_column('multi_destination_stops', sa.Column('delivery_contact_name', sa.String(length=200), nullable=True))
    op.add_column('multi_destination_stops', sa.Column('delivery_contact_phone', sa.String(length=20), nullable=True))
    op.add_column('multi_destination_stops', sa.Column('package_description', sa.String(length=500), nullable=True))
    op.add_column('multi_destination_stops', sa.Column('package_size', sa.String(length=50), nullable=True))
    op.add_column('multi_destination_stops', sa.Column('package_weight', sa.Float(), nullable=True))
    op.add_column('multi_destination_stops', sa.Column('special_instructions', sa.Text(), nullable=True))
    op.add_column('multi_destination_stops', sa.Column('estimated_arrival_time', sa.DateTime(), nullable=True))
    op.add_column('multi_destination_stops', sa.Column('actual_arrival_time', sa.DateTime(), nullable=True))
    op.add_column('multi_destination_stops', sa.Column('delivered_at', sa.DateTime(), nullable=True))
    op.add_column('multi_destination_stops', sa.Column('estimated_distance_from_previous', sa.Float(), nullable=True))
    op.add_column('multi_destination_stops', sa.Column('estimated_duration_from_previous', sa.Integer(), nullable=True))
    op.add_column('multi_destination_stops', sa.Column('proof_of_delivery_url', sa.String(length=500), nullable=True))
    op.add_column('multi_destination_stops', sa.Column('delivery_notes', sa.Text(), nullable=True))

    # Migration des données
    op.execute("""
        UPDATE multi_destination_stops 
        SET delivery_address = address,
            delivery_commune = commune,
            delivery_lat = latitude,
            delivery_lng = longitude,
            original_order = stop_order,
            special_instructions = instructions,
            actual_arrival_time = actual_arrival,
            estimated_arrival_time = estimated_arrival,
            delivery_notes = notes
        WHERE address IS NOT NULL
    """)

    # Suppression des anciennes colonnes
    op.drop_column('multi_destination_stops', 'actual_arrival')
    op.drop_column('multi_destination_stops', 'commune')
    op.drop_column('multi_destination_stops', 'stop_order')
    op.drop_column('multi_destination_stops', 'address')
    op.drop_column('multi_destination_stops', 'latitude')
    op.drop_column('multi_destination_stops', 'completion_time')
    op.drop_column('multi_destination_stops', 'notes')
    op.drop_column('multi_destination_stops', 'estimated_arrival')
    op.drop_column('multi_destination_stops', 'instructions')
    op.drop_column('multi_destination_stops', 'longitude')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('multi_destination_stops', sa.Column('longitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('multi_destination_stops', sa.Column('instructions', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('multi_destination_stops', sa.Column('estimated_arrival', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('multi_destination_stops', sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('multi_destination_stops', sa.Column('completion_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('multi_destination_stops', sa.Column('latitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('multi_destination_stops', sa.Column('address', sa.VARCHAR(length=500), autoincrement=False, nullable=False))
    op.add_column('multi_destination_stops', sa.Column('stop_order', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('multi_destination_stops', sa.Column('commune', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('multi_destination_stops', sa.Column('actual_arrival', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_column('multi_destination_stops', 'delivery_notes')
    op.drop_column('multi_destination_stops', 'proof_of_delivery_url')
    op.drop_column('multi_destination_stops', 'estimated_duration_from_previous')
    op.drop_column('multi_destination_stops', 'estimated_distance_from_previous')
    op.drop_column('multi_destination_stops', 'delivered_at')
    op.drop_column('multi_destination_stops', 'actual_arrival_time')
    op.drop_column('multi_destination_stops', 'estimated_arrival_time')
    op.drop_column('multi_destination_stops', 'special_instructions')
    op.drop_column('multi_destination_stops', 'package_weight')
    op.drop_column('multi_destination_stops', 'package_size')
    op.drop_column('multi_destination_stops', 'package_description')
    op.drop_column('multi_destination_stops', 'delivery_contact_phone')
    op.drop_column('multi_destination_stops', 'delivery_contact_name')
    op.drop_column('multi_destination_stops', 'delivery_lng')
    op.drop_column('multi_destination_stops', 'delivery_lat')
    op.drop_column('multi_destination_stops', 'delivery_commune')
    op.drop_column('multi_destination_stops', 'delivery_address')
    op.drop_column('multi_destination_stops', 'optimized_order')
    op.drop_column('multi_destination_stops', 'original_order')
    op.add_column('multi_destination_deliveries', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('multi_destination_deliveries', sa.Column('scheduled_start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('multi_destination_deliveries', sa.Column('actual_start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('multi_destination_deliveries', sa.Column('estimated_duration', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('multi_destination_deliveries', sa.Column('completed_destinations', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('multi_destination_deliveries', sa.Column('current_destination_index', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('multi_destination_deliveries', sa.Column('price_per_destination', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('multi_destination_deliveries', sa.Column('total_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.alter_column('multi_destination_deliveries', 'completed_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.drop_column('multi_destination_deliveries', 'cancelled_at')
    op.drop_column('multi_destination_deliveries', 'started_at')
    op.drop_column('multi_destination_deliveries', 'accepted_at')
    op.drop_column('multi_destination_deliveries', 'total_final_price')
    op.drop_column('multi_destination_deliveries', 'actual_total_duration')
    op.drop_column('multi_destination_deliveries', 'estimated_total_duration')
    op.drop_column('multi_destination_deliveries', 'estimated_total_distance')
    op.drop_column('multi_destination_deliveries', 'optimized_route')
    op.create_table('promotions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('promotions_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('code', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('promotion_type', postgresql.ENUM('discount_percentage', 'discount_fixed', 'free_delivery', 'cashback', 'referral_bonus', name='promotiontype'), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('draft', 'active', 'paused', 'expired', 'completed', name='promotionstatus'), autoincrement=False, nullable=True),
    sa.Column('discount_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('max_discount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('cashback_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('min_order_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('max_uses_total', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('max_uses_per_user', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('current_uses', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('target_user_types', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('target_zones', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('target_user_segments', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_stackable', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_auto_apply', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('requires_referral', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('budget_allocated', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('budget_used', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_by_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], name='promotions_created_by_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='promotions_pkey'),
    sa.UniqueConstraint('code', name='promotions_code_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_promotions_id', 'promotions', ['id'], unique=False)
    op.create_table('zone_restrictions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('zone_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('restriction_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('restriction_value', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['zone_id'], ['zones.id'], name='zone_restrictions_zone_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='zone_restrictions_pkey')
    )
    op.create_index('ix_zone_restrictions_id', 'zone_restrictions', ['id'], unique=False)
    op.create_table('otps',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('code', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('otp_type', postgresql.ENUM('REGISTRATION', 'LOGIN', 'PASSWORD_RESET', 'TWO_FACTOR', name='otptype'), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('PENDING', 'VERIFIED', 'EXPIRED', 'FAILED', name='otpstatus'), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('attempts', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('max_attempts', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('verified_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='otps_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='otps_pkey')
    )
    op.create_index('ix_otps_phone', 'otps', ['phone'], unique=False)
    op.create_index('ix_otps_id', 'otps', ['id'], unique=False)
    op.create_index('ix_otps_email', 'otps', ['email'], unique=False)
    op.create_table('zone_pricing_rules',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('zone_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('condition_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('condition_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('operator', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('price_adjustment', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('adjustment_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['zone_id'], ['zones.id'], name='zone_pricing_rules_zone_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='zone_pricing_rules_pkey')
    )
    op.create_index('ix_zone_pricing_rules_id', 'zone_pricing_rules', ['id'], unique=False)
    op.create_table('promotion_usages',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('promotion_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('delivery_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('discount_applied', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('cashback_earned', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('used_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['delivery_id'], ['deliveries.id'], name='promotion_usages_delivery_id_fkey'),
    sa.ForeignKeyConstraint(['promotion_id'], ['promotions.id'], name='promotion_usages_promotion_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='promotion_usages_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='promotion_usages_pkey')
    )
    op.create_index('ix_promotion_usages_id', 'promotion_usages', ['id'], unique=False)
    op.create_table('zones',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('zone_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('coordinates', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('center_lat', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('center_lng', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('radius', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('min_delivery_fee', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('max_delivery_fee', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('base_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('price_per_km', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('max_delivery_time', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('min_courier_rating', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('requires_special_vehicle', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('peak_hour_multiplier', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='zones_pkey')
    )
    op.create_index('ix_zones_id', 'zones', ['id'], unique=False)
    op.create_table('referral_programs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('referrer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('referred_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('referral_code', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('referrer_bonus', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('referred_bonus', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('is_completed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['referred_id'], ['users.id'], name='referral_programs_referred_id_fkey'),
    sa.ForeignKeyConstraint(['referrer_id'], ['users.id'], name='referral_programs_referrer_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='referral_programs_pkey')
    )
    op.create_index('ix_referral_programs_id', 'referral_programs', ['id'], unique=False)
    # ### end Alembic commands ###
