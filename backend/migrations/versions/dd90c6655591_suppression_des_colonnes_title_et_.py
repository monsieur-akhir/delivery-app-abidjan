"""Suppression des colonnes title et description de multi_destination_deliveries

Revision ID: dd90c6655591
Revises: final_merge_heads_001
Create Date: 2025-06-23 17:54:48.118984

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'dd90c6655591'
down_revision = 'final_merge_heads_001'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_collaborative_delivery_chat_id', table_name='collaborative_delivery_chat')
    op.execute("DROP TABLE IF EXISTS collaborative_delivery_chat CASCADE")
    op.drop_index('ix_zones_id', table_name='zones')
    op.execute("DROP TABLE IF EXISTS zones CASCADE")
    op.drop_index('ix_zone_restrictions_id', table_name='zone_restrictions')
    op.execute("DROP TABLE IF EXISTS zone_restrictions CASCADE")
    op.drop_index('ix_promotion_usages_id', table_name='promotion_usages')
    op.execute("DROP TABLE IF EXISTS promotion_usages CASCADE")
    op.drop_index('ix_collaborative_delivery_participants_id', table_name='collaborative_delivery_participants')
    op.execute("DROP TABLE IF EXISTS collaborative_delivery_participants CASCADE")
    op.drop_index('ix_counter_offers_id', table_name='counter_offers')
    op.drop_index('ix_counter_offers_status', table_name='counter_offers')
    op.execute("DROP TABLE IF EXISTS counter_offers CASCADE")
    op.drop_index('ix_negotiations_id', table_name='negotiations')
    op.drop_index('ix_negotiations_status', table_name='negotiations')
    op.execute("DROP TABLE IF EXISTS negotiations CASCADE")
    op.drop_index('ix_delivery_photos_id', table_name='delivery_photos')
    op.execute("DROP TABLE IF EXISTS delivery_photos CASCADE")
    op.drop_index('ix_zone_pricing_rules_id', table_name='zone_pricing_rules')
    op.execute("DROP TABLE IF EXISTS zone_pricing_rules CASCADE")
    op.drop_index('delivery_destinations_id_idx', table_name='delivery_destinations')
    op.drop_index('delivery_destinations_status_idx', table_name='delivery_destinations')
    op.execute("DROP TABLE IF EXISTS delivery_destinations CASCADE")
    op.drop_index('ix_moderation_actions_id', table_name='moderation_actions')
    op.drop_index('ix_moderation_actions_target_user_id', table_name='moderation_actions')
    op.execute("DROP TABLE IF EXISTS moderation_actions CASCADE")
    op.drop_index('ix_referral_programs_id', table_name='referral_programs')
    op.execute("DROP TABLE IF EXISTS referral_programs CASCADE")
    op.drop_index('ix_otps_email', table_name='otps')
    op.drop_index('ix_otps_id', table_name='otps')
    op.drop_index('ix_otps_phone', table_name='otps')
    op.execute("DROP TABLE IF EXISTS otps CASCADE")
    op.drop_index('ix_scheduled_delivery_instances_id', table_name='scheduled_delivery_instances')
    op.drop_index('ix_scheduled_delivery_instances_instance_date', table_name='scheduled_delivery_instances')
    op.execute("DROP TABLE IF EXISTS scheduled_delivery_instances CASCADE")
    op.drop_index('ix_delivery_tracking_delivery_id', table_name='delivery_tracking')
    op.drop_index('ix_delivery_tracking_id', table_name='delivery_tracking')
    op.execute("DROP TABLE IF EXISTS delivery_tracking CASCADE")
    op.drop_index('ix_promotions_id', table_name='promotions')
    op.execute("DROP TABLE IF EXISTS promotions CASCADE")
    op.drop_column('collaborative_deliveries', 'route_optimization_enabled')
    op.drop_column('collaborative_deliveries', 'actual_duration_minutes')
    op.drop_column('collaborative_deliveries', 'coordination_fee')
    op.drop_column('collaborative_deliveries', 'real_time_tracking')
    op.drop_column('collaborative_deliveries', 'completion_bonus')
    op.drop_column('collaborative_deliveries', 'estimated_duration_minutes')
    op.drop_column('deliveries', 'pickup_latitude')
    op.drop_column('deliveries', 'distance_km')
    op.drop_column('deliveries', 'recipient_name')
    op.drop_column('deliveries', 'package_dimensions')
    op.drop_column('deliveries', 'requires_signature')
    op.drop_column('deliveries', 'payment_status')
    op.drop_column('deliveries', 'delivery_longitude')
    op.drop_column('deliveries', 'traffic_conditions')
    op.drop_column('deliveries', 'package_value')
    op.drop_column('deliveries', 'priority_level')
    op.drop_column('deliveries', 'delivery_notes')
    op.drop_column('deliveries', 'pickup_longitude')
    op.drop_column('deliveries', 'tracking_number')
    op.drop_column('deliveries', 'weather_conditions')
    op.drop_column('deliveries', 'recipient_phone')
    op.drop_column('deliveries', 'proof_of_delivery')
    op.drop_column('deliveries', 'delivery_latitude')
    op.drop_column('deliveries', 'actual_duration_minutes')
    op.drop_column('deliveries', 'estimated_duration_minutes')
    op.add_column('multi_destination_bids', sa.Column('total_price', sa.Float(), nullable=False))
    op.add_column('multi_destination_bids', sa.Column('expires_at', sa.DateTime(), nullable=True))
    op.drop_column('multi_destination_bids', 'proposed_price')
    op.drop_column('multi_destination_bids', 'alternative_route')
    op.add_column('multi_destination_deliveries', sa.Column('destinations', sa.JSON(), nullable=False))
    op.add_column('multi_destination_deliveries', sa.Column('total_price', sa.Float(), nullable=True))
    op.add_column('multi_destination_deliveries', sa.Column('price_per_destination', sa.Float(), nullable=True))
    op.add_column('multi_destination_deliveries', sa.Column('estimated_duration', sa.Integer(), nullable=True))
    op.add_column('multi_destination_deliveries', sa.Column('scheduled_start_time', sa.DateTime(), nullable=True))
    op.add_column('multi_destination_deliveries', sa.Column('actual_start_time', sa.DateTime(), nullable=True))
    op.add_column('multi_destination_deliveries', sa.Column('current_destination_index', sa.Integer(), nullable=True))
    op.add_column('multi_destination_deliveries', sa.Column('completed_destinations', sa.JSON(), nullable=True))
    op.add_column('multi_destination_deliveries', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('multi_destination_deliveries', 'completed_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.drop_column('multi_destination_deliveries', 'total_final_price')
    op.drop_column('multi_destination_deliveries', 'estimated_total_duration')
    op.drop_column('multi_destination_deliveries', 'optimized_route')
    op.drop_column('multi_destination_deliveries', 'estimated_total_distance')
    op.drop_column('multi_destination_deliveries', 'actual_total_duration')
    op.drop_column('multi_destination_deliveries', 'cancelled_at')
    op.drop_column('multi_destination_deliveries', 'accepted_at')
    op.drop_column('multi_destination_deliveries', 'started_at')
    op.add_column('multi_destination_stops', sa.Column('stop_order', sa.Integer(), nullable=False))
    op.add_column('multi_destination_stops', sa.Column('address', sa.String(length=500), nullable=False))
    op.add_column('multi_destination_stops', sa.Column('latitude', sa.Float(), nullable=True))
    op.add_column('multi_destination_stops', sa.Column('longitude', sa.Float(), nullable=True))
    op.add_column('multi_destination_stops', sa.Column('commune', sa.String(length=100), nullable=True))
    op.add_column('multi_destination_stops', sa.Column('instructions', sa.Text(), nullable=True))
    op.add_column('multi_destination_stops', sa.Column('estimated_arrival', sa.DateTime(), nullable=True))
    op.add_column('multi_destination_stops', sa.Column('actual_arrival', sa.DateTime(), nullable=True))
    op.add_column('multi_destination_stops', sa.Column('completion_time', sa.DateTime(), nullable=True))
    op.add_column('multi_destination_stops', sa.Column('notes', sa.Text(), nullable=True))
    op.add_column('multi_destination_stops', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.add_column('multi_destination_stops', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('multi_destination_stops', 'recipient_name',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_column('multi_destination_stops', 'package_weight')
    op.drop_column('multi_destination_stops', 'delivery_contact_name')
    op.drop_column('multi_destination_stops', 'optimized_order')
    op.drop_column('multi_destination_stops', 'package_description')
    op.drop_column('multi_destination_stops', 'estimated_distance_from_previous')
    op.drop_column('multi_destination_stops', 'original_order')
    op.drop_column('multi_destination_stops', 'estimated_duration_from_previous')
    op.drop_column('multi_destination_stops', 'estimated_arrival_time')
    op.drop_column('multi_destination_stops', 'special_instructions')
    op.drop_column('multi_destination_stops', 'delivery_address')
    op.drop_column('multi_destination_stops', 'delivery_lng')
    op.drop_column('multi_destination_stops', 'delivery_contact_phone')
    op.drop_column('multi_destination_stops', 'delivery_notes')
    op.drop_column('multi_destination_stops', 'delivery_lat')
    op.drop_column('multi_destination_stops', 'actual_arrival_time')
    op.drop_column('multi_destination_stops', 'delivery_commune')
    op.drop_column('multi_destination_stops', 'package_size')
    op.drop_column('multi_destination_stops', 'delivered_at')
    op.drop_column('multi_destination_stops', 'proof_of_delivery_url')
    op.drop_index('ix_policies_status', table_name='policies')
    op.add_column('scheduled_deliveries', sa.Column('courier_id', sa.Integer(), nullable=True))
    op.drop_index('ix_scheduled_deliveries_scheduled_date', table_name='scheduled_deliveries')
    op.drop_index('ix_scheduled_deliveries_status', table_name='scheduled_deliveries')
    op.create_foreign_key(None, 'scheduled_deliveries', 'users', ['courier_id'], ['id'])
    op.execute("ALTER TABLE scheduled_delivery_executions ALTER COLUMN status TYPE executionstatus USING status::executionstatus")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'scheduled_deliveries', type_='foreignkey')
    op.create_index('ix_scheduled_deliveries_status', 'scheduled_deliveries', ['status'], unique=False)
    op.create_index('ix_scheduled_deliveries_scheduled_date', 'scheduled_deliveries', ['scheduled_date'], unique=False)
    op.drop_column('scheduled_deliveries', 'courier_id')
    op.create_index('ix_policies_status', 'policies', ['status'], unique=False)
    op.add_column('multi_destination_stops', sa.Column('proof_of_delivery_url', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('multi_destination_stops', sa.Column('delivered_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('multi_destination_stops', sa.Column('package_size', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('multi_destination_stops', sa.Column('delivery_commune', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('multi_destination_stops', sa.Column('actual_arrival_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('multi_destination_stops', sa.Column('delivery_lat', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('multi_destination_stops', sa.Column('delivery_notes', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('multi_destination_stops', sa.Column('delivery_contact_phone', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('multi_destination_stops', sa.Column('delivery_lng', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('multi_destination_stops', sa.Column('delivery_address', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('multi_destination_stops', sa.Column('special_instructions', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('multi_destination_stops', sa.Column('estimated_arrival_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('multi_destination_stops', sa.Column('estimated_duration_from_previous', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('multi_destination_stops', sa.Column('original_order', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('multi_destination_stops', sa.Column('estimated_distance_from_previous', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('multi_destination_stops', sa.Column('package_description', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('multi_destination_stops', sa.Column('optimized_order', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('multi_destination_stops', sa.Column('delivery_contact_name', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('multi_destination_stops', sa.Column('package_weight', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.alter_column('multi_destination_stops', 'recipient_name',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_column('multi_destination_stops', 'updated_at')
    op.drop_column('multi_destination_stops', 'created_at')
    op.drop_column('multi_destination_stops', 'notes')
    op.drop_column('multi_destination_stops', 'completion_time')
    op.drop_column('multi_destination_stops', 'actual_arrival')
    op.drop_column('multi_destination_stops', 'estimated_arrival')
    op.drop_column('multi_destination_stops', 'instructions')
    op.drop_column('multi_destination_stops', 'commune')
    op.drop_column('multi_destination_stops', 'longitude')
    op.drop_column('multi_destination_stops', 'latitude')
    op.drop_column('multi_destination_stops', 'address')
    op.drop_column('multi_destination_stops', 'stop_order')
    op.add_column('multi_destination_deliveries', sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('multi_destination_deliveries', sa.Column('accepted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('multi_destination_deliveries', sa.Column('cancelled_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('multi_destination_deliveries', sa.Column('actual_total_duration', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('multi_destination_deliveries', sa.Column('estimated_total_distance', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('multi_destination_deliveries', sa.Column('optimized_route', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('multi_destination_deliveries', sa.Column('estimated_total_duration', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('multi_destination_deliveries', sa.Column('total_final_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.alter_column('multi_destination_deliveries', 'completed_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.drop_column('multi_destination_deliveries', 'updated_at')
    op.drop_column('multi_destination_deliveries', 'completed_destinations')
    op.drop_column('multi_destination_deliveries', 'current_destination_index')
    op.drop_column('multi_destination_deliveries', 'actual_start_time')
    op.drop_column('multi_destination_deliveries', 'scheduled_start_time')
    op.drop_column('multi_destination_deliveries', 'estimated_duration')
    op.drop_column('multi_destination_deliveries', 'price_per_destination')
    op.drop_column('multi_destination_deliveries', 'total_price')
    op.drop_column('multi_destination_deliveries', 'destinations')
    op.add_column('multi_destination_bids', sa.Column('alternative_route', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('multi_destination_bids', sa.Column('proposed_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.drop_column('multi_destination_bids', 'expires_at')
    op.drop_column('multi_destination_bids', 'total_price')
    op.add_column('deliveries', sa.Column('estimated_duration_minutes', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('deliveries', sa.Column('actual_duration_minutes', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('deliveries', sa.Column('delivery_latitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('deliveries', sa.Column('proof_of_delivery', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('deliveries', sa.Column('recipient_phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.add_column('deliveries', sa.Column('weather_conditions', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('deliveries', sa.Column('tracking_number', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('deliveries', sa.Column('pickup_longitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('deliveries', sa.Column('delivery_notes', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('deliveries', sa.Column('priority_level', sa.VARCHAR(length=20), server_default=sa.text("'normal'::character varying"), autoincrement=False, nullable=False))
    op.add_column('deliveries', sa.Column('package_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('deliveries', sa.Column('traffic_conditions', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('deliveries', sa.Column('delivery_longitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('deliveries', sa.Column('payment_status', sa.VARCHAR(length=50), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=False))
    op.add_column('deliveries', sa.Column('requires_signature', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False))
    op.add_column('deliveries', sa.Column('package_dimensions', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('deliveries', sa.Column('recipient_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('deliveries', sa.Column('distance_km', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('deliveries', sa.Column('pickup_latitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('collaborative_deliveries', sa.Column('estimated_duration_minutes', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('collaborative_deliveries', sa.Column('completion_bonus', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('collaborative_deliveries', sa.Column('real_time_tracking', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False))
    op.add_column('collaborative_deliveries', sa.Column('coordination_fee', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('collaborative_deliveries', sa.Column('actual_duration_minutes', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('collaborative_deliveries', sa.Column('route_optimization_enabled', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False))
    op.create_table('promotions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('promotions_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('code', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('promotion_type', postgresql.ENUM('discount_percentage', 'discount_fixed', 'free_delivery', 'cashback', 'referral_bonus', name='promotiontype'), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('draft', 'active', 'paused', 'expired', 'completed', name='promotionstatus'), autoincrement=False, nullable=True),
    sa.Column('discount_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('max_discount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('cashback_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('min_order_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('max_uses_total', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('max_uses_per_user', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('current_uses', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('target_user_types', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('target_zones', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('target_user_segments', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_stackable', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_auto_apply', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('requires_referral', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('budget_allocated', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('budget_used', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_by_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], name='promotions_created_by_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='promotions_pkey'),
    sa.UniqueConstraint('code', name='promotions_code_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_promotions_id', 'promotions', ['id'], unique=False)
    op.create_table('delivery_tracking',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('delivery_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('latitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('longitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('accuracy', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('speed', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('heading', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('altitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('battery_level', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_moving', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['delivery_id'], ['deliveries.id'], name='delivery_tracking_delivery_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='delivery_tracking_pkey')
    )
    op.create_index('ix_delivery_tracking_id', 'delivery_tracking', ['id'], unique=False)
    op.create_index('ix_delivery_tracking_delivery_id', 'delivery_tracking', ['delivery_id'], unique=False)
    op.create_table('scheduled_delivery_instances',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('scheduled_delivery_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('delivery_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('instance_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('executed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['delivery_id'], ['deliveries.id'], name='scheduled_delivery_instances_delivery_id_fkey'),
    sa.ForeignKeyConstraint(['scheduled_delivery_id'], ['scheduled_deliveries.id'], name='scheduled_delivery_instances_scheduled_delivery_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='scheduled_delivery_instances_pkey')
    )
    op.create_index('ix_scheduled_delivery_instances_instance_date', 'scheduled_delivery_instances', ['instance_date'], unique=False)
    op.create_index('ix_scheduled_delivery_instances_id', 'scheduled_delivery_instances', ['id'], unique=False)
    op.create_table('otps',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('code', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('otp_type', postgresql.ENUM('REGISTRATION', 'LOGIN', 'PASSWORD_RESET', 'TWO_FACTOR', name='otptype'), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('PENDING', 'VERIFIED', 'EXPIRED', 'FAILED', name='otpstatus'), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('attempts', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('max_attempts', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('verified_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='otps_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='otps_pkey')
    )
    op.create_index('ix_otps_phone', 'otps', ['phone'], unique=False)
    op.create_index('ix_otps_id', 'otps', ['id'], unique=False)
    op.create_index('ix_otps_email', 'otps', ['email'], unique=False)
    op.create_table('referral_programs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('referrer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('referred_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('referral_code', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('referrer_bonus', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('referred_bonus', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('is_completed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['referred_id'], ['users.id'], name='referral_programs_referred_id_fkey'),
    sa.ForeignKeyConstraint(['referrer_id'], ['users.id'], name='referral_programs_referrer_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='referral_programs_pkey')
    )
    op.create_index('ix_referral_programs_id', 'referral_programs', ['id'], unique=False)
    op.create_table('moderation_actions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('rule_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('target_user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('target_content_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('target_content_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('action_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('action_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('performed_by_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['performed_by_id'], ['users.id'], name='moderation_actions_performed_by_id_fkey'),
    sa.ForeignKeyConstraint(['rule_id'], ['moderation_rules.id'], name='moderation_actions_rule_id_fkey'),
    sa.ForeignKeyConstraint(['target_user_id'], ['users.id'], name='moderation_actions_target_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='moderation_actions_pkey')
    )
    op.create_index('ix_moderation_actions_target_user_id', 'moderation_actions', ['target_user_id'], unique=False)
    op.create_index('ix_moderation_actions_id', 'moderation_actions', ['id'], unique=False)
    op.create_table('delivery_destinations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('multi_delivery_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('recipient_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('recipient_phone', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('delivery_address', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('delivery_commune', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('delivery_latitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('delivery_longitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('package_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('package_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('delivery_fee', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('order_sequence', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=False),
    sa.Column('delivered_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('delivery_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['multi_delivery_id'], ['multi_destination_deliveries.id'], name='delivery_destinations_multi_delivery_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='delivery_destinations_pkey')
    )
    op.create_index('delivery_destinations_status_idx', 'delivery_destinations', ['status'], unique=False)
    op.create_index('delivery_destinations_id_idx', 'delivery_destinations', ['id'], unique=False)
    op.create_table('zone_pricing_rules',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('zone_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('condition_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('condition_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('operator', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('price_adjustment', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('adjustment_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['zone_id'], ['zones.id'], name='zone_pricing_rules_zone_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='zone_pricing_rules_pkey')
    )
    op.create_index('ix_zone_pricing_rules_id', 'zone_pricing_rules', ['id'], unique=False)
    op.create_table('delivery_photos',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('delivery_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('photo_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('photo_url', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('taken_by_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['delivery_id'], ['deliveries.id'], name='delivery_photos_delivery_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['taken_by_id'], ['users.id'], name='delivery_photos_taken_by_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='delivery_photos_pkey')
    )
    op.create_index('ix_delivery_photos_id', 'delivery_photos', ['id'], unique=False)
    op.create_table('negotiations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('delivery_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('courier_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('initial_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('proposed_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('counter_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('final_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=False),
    sa.Column('client_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('courier_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('resolved_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['users.id'], name='negotiations_client_id_fkey'),
    sa.ForeignKeyConstraint(['courier_id'], ['users.id'], name='negotiations_courier_id_fkey'),
    sa.ForeignKeyConstraint(['delivery_id'], ['deliveries.id'], name='negotiations_delivery_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='negotiations_pkey')
    )
    op.create_index('ix_negotiations_status', 'negotiations', ['status'], unique=False)
    op.create_index('ix_negotiations_id', 'negotiations', ['id'], unique=False)
    op.create_table('counter_offers',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('delivery_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('courier_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('original_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('proposed_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('estimated_time', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['courier_id'], ['users.id'], name='counter_offers_courier_id_fkey'),
    sa.ForeignKeyConstraint(['delivery_id'], ['deliveries.id'], name='counter_offers_delivery_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='counter_offers_pkey')
    )
    op.create_index('ix_counter_offers_status', 'counter_offers', ['status'], unique=False)
    op.create_index('ix_counter_offers_id', 'counter_offers', ['id'], unique=False)
    op.create_table('collaborative_delivery_participants',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('collaborative_delivery_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('courier_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(length=50), server_default=sa.text("'participant'::character varying"), autoincrement=False, nullable=False),
    sa.Column('assignment_order', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('assigned_deliveries', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('earnings_share_percentage', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text("'0'::double precision"), autoincrement=False, nullable=False),
    sa.Column('performance_rating', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'invited'::character varying"), autoincrement=False, nullable=False),
    sa.Column('joined_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['collaborative_delivery_id'], ['collaborative_deliveries.id'], name='collaborative_delivery_participa_collaborative_delivery_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['courier_id'], ['users.id'], name='collaborative_delivery_participants_courier_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='collaborative_delivery_participants_pkey')
    )
    op.create_index('ix_collaborative_delivery_participants_id', 'collaborative_delivery_participants', ['id'], unique=False)
    op.create_table('promotion_usages',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('promotion_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('delivery_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('discount_applied', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('cashback_earned', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('used_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['delivery_id'], ['deliveries.id'], name='promotion_usages_delivery_id_fkey'),
    sa.ForeignKeyConstraint(['promotion_id'], ['promotions.id'], name='promotion_usages_promotion_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='promotion_usages_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='promotion_usages_pkey')
    )
    op.create_index('ix_promotion_usages_id', 'promotion_usages', ['id'], unique=False)
    op.create_table('zone_restrictions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('zone_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('restriction_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('restriction_value', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['zone_id'], ['zones.id'], name='zone_restrictions_zone_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='zone_restrictions_pkey')
    )
    op.create_index('ix_zone_restrictions_id', 'zone_restrictions', ['id'], unique=False)
    op.create_table('zones',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('zone_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('coordinates', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('center_lat', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('center_lng', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('radius', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('min_delivery_fee', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('max_delivery_fee', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('base_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('price_per_km', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('max_delivery_time', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('min_courier_rating', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('requires_special_vehicle', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('peak_hour_multiplier', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='zones_pkey')
    )
    op.create_index('ix_zones_id', 'zones', ['id'], unique=False)
    op.create_table('collaborative_delivery_chat',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('collaborative_delivery_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('sender_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('message_type', sa.VARCHAR(length=50), server_default=sa.text("'text'::character varying"), autoincrement=False, nullable=False),
    sa.Column('is_system_message', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('read_by', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['collaborative_delivery_id'], ['collaborative_deliveries.id'], name='collaborative_delivery_chat_collaborative_delivery_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['sender_id'], ['users.id'], name='collaborative_delivery_chat_sender_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='collaborative_delivery_chat_pkey')
    )
    op.create_index('ix_collaborative_delivery_chat_id', 'collaborative_delivery_chat', ['id'], unique=False)
    # ### end Alembic commands ###
