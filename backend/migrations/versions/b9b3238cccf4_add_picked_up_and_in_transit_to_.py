"""add_picked_up_and_in_transit_to_delivery_status

Revision ID: b9b3238cccf4
Revises: fb9d6fa96e85
Create Date: 2025-07-01 01:15:38.312312

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import sqlalchemy_utils

# revision identifiers, used by Alembic.
revision = 'b9b3238cccf4'
down_revision = 'fb9d6fa96e85'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Supprimer les tables avec CASCADE pour éviter les erreurs de contraintes
    try:
        op.execute("DROP TABLE IF EXISTS zone_pricing_rules CASCADE")
        op.execute("DROP TABLE IF EXISTS zone_restrictions CASCADE")
        op.execute("DROP TABLE IF EXISTS promotion_usages CASCADE")
        op.execute("DROP TABLE IF EXISTS promotions CASCADE")
        op.execute("DROP TABLE IF EXISTS referral_programs CASCADE")
        op.execute("DROP TABLE IF EXISTS otps CASCADE")
        op.execute("DROP TABLE IF EXISTS zones CASCADE")
    except Exception as e:
        print(f"Erreur lors de la suppression des tables: {e}")
        pass
    op.add_column('multi_destination_bids', sa.Column('proposed_price', sa.Float(), nullable=False))
    op.add_column('multi_destination_bids', sa.Column('alternative_route', sa.JSON(), nullable=True))
    op.drop_column('multi_destination_bids', 'total_price')
    op.alter_column('users', 'phone',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(),
               nullable=True)
    # Garder les contraintes d'unicité pour la sécurité des données
    # op.drop_constraint('users_unique', 'users', type_='unique')
    # op.drop_constraint('users_unique_1', 'users', type_='unique')
    op.execute("ALTER TYPE deliverystatus ADD VALUE IF NOT EXISTS 'picked_up'")
    op.execute("ALTER TYPE deliverystatus ADD VALUE IF NOT EXISTS 'in_transit'")
    op.create_table(
        'kyc_documents',
        sa.Column('id', sa.Integer, primary_key=True, index=True),
        sa.Column('user_id', sa.Integer, sa.ForeignKey('users.id'), nullable=False, index=True),
        sa.Column('type', sa.Enum('id_card', 'driving_license', 'vehicle_registration', 'insurance', 'selfie', name='kycdocumenttype'), nullable=False),
        sa.Column('url', sa.String, nullable=False),
        sa.Column('status', sa.Enum('pending', 'approved', 'rejected', name='kycdocumentstatus'), default='pending'),
        sa.Column('rejection_reason', sa.Text, nullable=True),
        sa.Column('submitted_at', sa.DateTime(timezone=True), server_default=sa.func.now()),
        sa.Column('updated_at', sa.DateTime(timezone=True), onupdate=sa.func.now()),
    )
    op.drop_column('users', 'kyc_document_url')
    op.drop_column('users', 'kyc_status')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Ne pas recréer les contraintes d'unicité pour éviter les conflits
    # op.create_unique_constraint('users_unique_1', 'users', ['email'])
    # op.create_unique_constraint('users_unique', 'users', ['phone'])
    op.alter_column('users', 'phone',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.add_column('multi_destination_bids', sa.Column('total_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.drop_column('multi_destination_bids', 'alternative_route')
    op.drop_column('multi_destination_bids', 'proposed_price')
    op.create_table('referral_programs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('referrer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('referred_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('referral_code', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('referrer_bonus', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('referred_bonus', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('is_completed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['referred_id'], ['users.id'], name='referral_programs_referred_id_fkey'),
    sa.ForeignKeyConstraint(['referrer_id'], ['users.id'], name='referral_programs_referrer_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='referral_programs_pkey')
    )
    op.create_index('ix_referral_programs_id', 'referral_programs', ['id'], unique=False)
    op.create_table('zone_pricing_rules',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('zone_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('condition_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('condition_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('operator', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('price_adjustment', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('adjustment_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['zone_id'], ['zones.id'], name='zone_pricing_rules_zone_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='zone_pricing_rules_pkey')
    )
    op.create_index('ix_zone_pricing_rules_id', 'zone_pricing_rules', ['id'], unique=False)
    op.create_table('promotions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('promotions_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('code', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('promotion_type', postgresql.ENUM('discount_percentage', 'discount_fixed', 'free_delivery', 'cashback', 'referral_bonus', name='promotiontype'), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('draft', 'active', 'paused', 'expired', 'completed', name='promotionstatus'), autoincrement=False, nullable=True),
    sa.Column('discount_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('max_discount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('cashback_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('min_order_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('max_uses_total', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('max_uses_per_user', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('current_uses', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('target_user_types', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('target_zones', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('target_user_segments', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_stackable', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_auto_apply', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('requires_referral', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('budget_allocated', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('budget_used', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_by_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], name='promotions_created_by_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='promotions_pkey'),
    sa.UniqueConstraint('code', name='promotions_code_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_promotions_id', 'promotions', ['id'], unique=False)
    op.create_table('zone_restrictions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('zone_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('restriction_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('restriction_value', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['zone_id'], ['zones.id'], name='zone_restrictions_zone_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='zone_restrictions_pkey')
    )
    op.create_index('ix_zone_restrictions_id', 'zone_restrictions', ['id'], unique=False)
    op.create_table('promotion_usages',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('promotion_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('delivery_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('discount_applied', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('cashback_earned', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('used_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['delivery_id'], ['deliveries.id'], name='promotion_usages_delivery_id_fkey'),
    sa.ForeignKeyConstraint(['promotion_id'], ['promotions.id'], name='promotion_usages_promotion_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='promotion_usages_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='promotion_usages_pkey')
    )
    op.create_index('ix_promotion_usages_id', 'promotion_usages', ['id'], unique=False)
    op.create_table('otps',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('code', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('otp_type', postgresql.ENUM('REGISTRATION', 'LOGIN', 'PASSWORD_RESET', 'TWO_FACTOR', name='otptype'), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('PENDING', 'VERIFIED', 'EXPIRED', 'FAILED', name='otpstatus'), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('attempts', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('max_attempts', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('verified_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='otps_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='otps_pkey')
    )
    op.create_index('ix_otps_phone', 'otps', ['phone'], unique=False)
    op.create_index('ix_otps_id', 'otps', ['id'], unique=False)
    op.create_index('ix_otps_email', 'otps', ['email'], unique=False)
    op.create_table('zones',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('zone_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('coordinates', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('center_lat', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('center_lng', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('radius', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('min_delivery_fee', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('max_delivery_fee', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('base_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('price_per_km', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('max_delivery_time', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('min_courier_rating', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('requires_special_vehicle', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('peak_hour_multiplier', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='zones_pkey')
    )
    op.create_index('ix_zones_id', 'zones', ['id'], unique=False)
    op.add_column('users', sa.Column('kyc_document_url', sa.String, nullable=True))
    op.add_column('users', sa.Column('kyc_status', sa.Enum('pending', 'verified', 'rejected', name='kycstatus'), default='pending'))
    op.drop_table('kyc_documents')
    # ### end Alembic commands ###
