#!/usr/bin/env python3
"""
Script de test pour l'authentification et le WebSocket avec un vrai token JWT
"""

import asyncio
import websockets
import json
import requests
import sys
from datetime import datetime

# Configuration
API_BASE_URL = "http://localhost:8000"
WS_BASE_URL = "ws://localhost:8001"

async def test_auth_and_websocket():
    """Test complet d'authentification et WebSocket"""
    print("üß™ Test Authentification + WebSocket")
    print("=" * 50)
    
    # √âtape 1: Authentification
    print("1Ô∏è‚É£ Authentification...")
    try:
        # Essayer de se connecter avec un utilisateur de test
        login_data = {
            "phone": "22507000000",  # Num√©ro de test
            "password": "test123"    # Mot de passe de test
        }
        
        response = requests.post(f"{API_BASE_URL}/api/auth/login", json=login_data)
        
        if response.status_code == 200:
            auth_data = response.json()
            token = auth_data.get("token")
            user = auth_data.get("user")
            
            print(f"‚úÖ Authentification r√©ussie!")
            print(f"   - User ID: {user.get('id')}")
            print(f"   - User Name: {user.get('full_name')}")
            print(f"   - Token: {token[:20]}...")
            
        else:
            print(f"‚ùå √âchec de l'authentification: {response.status_code}")
            print(f"   R√©ponse: {response.text}")
            
            # Essayer de cr√©er un utilisateur de test
            print("\nüîÑ Tentative de cr√©ation d'utilisateur de test...")
            register_data = {
                "full_name": "Test User",
                "phone": "22507000000",
                "email": "test@example.com",
                "password": "test123",
                "role": "client"
            }
            
            register_response = requests.post(f"{API_BASE_URL}/api/auth/register", json=register_data)
            
            if register_response.status_code == 200:
                print("‚úÖ Utilisateur de test cr√©√©!")
                # R√©essayer la connexion
                response = requests.post(f"{API_BASE_URL}/api/auth/login", json=login_data)
                if response.status_code == 200:
                    auth_data = response.json()
                    token = auth_data.get("token")
                    user = auth_data.get("user")
                    print(f"‚úÖ Connexion r√©ussie apr√®s cr√©ation!")
                else:
                    print(f"‚ùå √âchec de la connexion apr√®s cr√©ation: {response.status_code}")
                    return
            else:
                print(f"‚ùå √âchec de la cr√©ation d'utilisateur: {register_response.status_code}")
                return
                
    except Exception as e:
        print(f"‚ùå Erreur lors de l'authentification: {e}")
        return
    
    # √âtape 2: Test WebSocket avec le vrai token
    print("\n2Ô∏è‚É£ Test WebSocket avec token valide...")
    try:
        user_id = user.get("id")
        ws_url = f"{WS_BASE_URL}/ws/{user_id}?token={token}"
        
        print(f"üîó Connexion √†: {ws_url}")
        
        async with websockets.connect(ws_url) as websocket:
            print("‚úÖ Connexion WebSocket √©tablie avec succ√®s!")
            
            # Envoyer un message de test
            test_message = {
                "type": "test",
                "data": {
                    "message": "Test de connexion WebSocket authentifi√©e",
                    "timestamp": datetime.now().isoformat(),
                    "user_id": user_id
                }
            }
            
            await websocket.send(json.dumps(test_message))
            print("‚úÖ Message de test envoy√©")
            
            # Attendre une r√©ponse
            try:
                response = await asyncio.wait_for(websocket.recv(), timeout=5.0)
                print(f"‚úÖ R√©ponse re√ßue: {response}")
            except asyncio.TimeoutError:
                print("‚ö†Ô∏è  Aucune r√©ponse re√ßue dans les 5 secondes (normal)")
            
            print("‚úÖ Test WebSocket termin√© avec succ√®s!")
            
    except websockets.exceptions.InvalidStatusCode as e:
        if e.status_code == 403:
            print("‚ùå Connexion refus√©e (403): Token invalide ou expir√©")
        else:
            print(f"‚ùå Erreur de statut: {e.status_code}")
    except websockets.exceptions.ConnectionRefusedError:
        print("‚ùå Connexion refus√©e: Le serveur WebSocket n'est pas d√©marr√©")
    except Exception as e:
        print(f"‚ùå Erreur de connexion WebSocket: {e}")
    
    print("\nüìã R√©sum√©:")
    print("- Si vous voyez '‚úÖ Connexion WebSocket √©tablie', tout fonctionne")
    print("- Le token JWT g√©n√©r√© peut √™tre utilis√© dans l'app mobile")
    print("- V√©rifiez que l'URL WebSocket correspond √† votre configuration mobile")

if __name__ == "__main__":
    asyncio.run(test_auth_and_websocket()) 