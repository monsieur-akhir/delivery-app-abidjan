#!/usr/bin/env python3
"""
Test des endpoints publics d'autocompl√©tion
"""
import requests
import json
import time

API_URL = "http://localhost:8000"
ENDPOINT_PUBLIC_GET = "/api/address-autocomplete/public"
ENDPOINT_PUBLIC_POST = "/api/address-autocomplete/public"

def test_public_autocomplete():
    print("üåç Test des endpoints publics d'autocompl√©tion")
    print("=" * 60)
    
    # Test 1: Requ√™te GET publique
    print("\n1Ô∏è‚É£ Test GET /api/address-autocomplete/public")
    print("-" * 50)
    
    params = {"input": "paris"}
    
    try:
        print(f"URL: {API_URL}{ENDPOINT_PUBLIC_GET}")
        print(f"Params: {json.dumps(params, indent=2)}")
        
        resp = requests.get(API_URL + ENDPOINT_PUBLIC_GET, params=params, timeout=15)
        print(f"Status: {resp.status_code}")
        print(f"Headers: {dict(resp.headers)}")
        print(f"R√©ponse: {resp.text[:500]}...")
        
        if resp.status_code == 200:
            data = resp.json()
            predictions = data.get('predictions', [])
            print(f"‚úÖ Succ√®s! {len(predictions)} suggestions trouv√©es")
            
            if predictions:
                print("üìã Premi√®res suggestions:")
                for i, pred in enumerate(predictions[:5]):
                    address = pred.get('description', pred.get('address', 'N/A'))
                    place_id = pred.get('place_id', 'N/A')
                    print(f"   {i+1}. {address}")
                    print(f"      ID: {place_id}")
            else:
                print("‚ö†Ô∏è  Aucune suggestion trouv√©e")
        else:
            print("‚ùå √âchec")
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
    
    # Test 2: Requ√™te POST publique
    print("\n2Ô∏è‚É£ Test POST /api/address-autocomplete/public")
    print("-" * 50)
    
    payload = {"input": "london"}
    headers = {"Content-Type": "application/json"}
    
    try:
        print(f"URL: {API_URL}{ENDPOINT_PUBLIC_POST}")
        print(f"Payload: {json.dumps(payload, indent=2)}")
        
        resp = requests.post(API_URL + ENDPOINT_PUBLIC_POST, json=payload, headers=headers, timeout=15)
        print(f"Status: {resp.status_code}")
        print(f"R√©ponse: {resp.text[:500]}...")
        
        if resp.status_code == 200:
            data = resp.json()
            predictions = data.get('predictions', [])
            print(f"‚úÖ Succ√®s! {len(predictions)} suggestions trouv√©es")
            
            if predictions:
                print("üìã Premi√®res suggestions:")
                for i, pred in enumerate(predictions[:5]):
                    address = pred.get('description', pred.get('address', 'N/A'))
                    place_id = pred.get('place_id', 'N/A')
                    print(f"   {i+1}. {address}")
                    print(f"      ID: {place_id}")
            else:
                print("‚ö†Ô∏è  Aucune suggestion trouv√©e")
        else:
            print("‚ùå √âchec")
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
    
    # Test 3: Recherche courte
    print("\n3Ô∏è‚É£ Test recherche courte 'a'")
    print("-" * 30)
    
    params = {"input": "a"}
    
    try:
        resp = requests.get(API_URL + ENDPOINT_PUBLIC_GET, params=params, timeout=15)
        print(f"Status: {resp.status_code}")
        
        if resp.status_code == 200:
            data = resp.json()
            predictions = data.get('predictions', [])
            print(f"‚úÖ {len(predictions)} suggestions pour 'a'")
            
            if predictions:
                for i, pred in enumerate(predictions[:3]):
                    address = pred.get('description', pred.get('address', 'N/A'))
                    print(f"   {i+1}. {address}")
            else:
                print("‚ö†Ô∏è  Aucune suggestion trouv√©e")
        else:
            print("‚ùå √âchec")
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")

def test_server_health():
    print("\nüè• Test de sant√© du serveur")
    print("-" * 30)
    
    try:
        resp = requests.get(f"{API_URL}/health", timeout=5)
        print(f"Status: {resp.status_code}")
        print(f"R√©ponse: {resp.text}")
    except Exception as e:
        print(f"‚ùå Serveur non accessible: {e}")

if __name__ == "__main__":
    test_server_health()
    time.sleep(2)  # Attendre un peu
    test_public_autocomplete() 