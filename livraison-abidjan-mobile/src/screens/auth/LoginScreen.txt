"use client"

import type React from "react"
import { useState, useEffect } from "react"
import { View, StyleSheet, Image, TouchableOpacity, KeyboardAvoidingView, Platform, ScrollView } from "react-native"
import { TextInput, Button, Text, Snackbar, Checkbox } from "react-native-paper"
import * as Animatable from "react-native-animatable"
import { useTranslation } from "react-i18next"
import AsyncStorage from "@react-native-async-storage/async-storage"
import { useAuth } from "../../contexts/AuthContext"
import { useNetwork } from "../../contexts/NetworkContext"
import type { NativeStackNavigationProp } from "@react-navigation/native-stack"
import type { RootStackParamList } from "../../types/navigation"
import i18n from "../../i18n"
import LoginConnexionSvg from "../../assets/login-connexion.svg"

type LoginScreenProps = {
  navigation: NativeStackNavigationProp<RootStackParamList, "Login">
}

const LoginScreen: React.FC<LoginScreenProps> = ({ navigation }) => {
  const { t } = useTranslation()
  const { signIn } = useAuth()
  const { isConnected, isOfflineMode, toggleOfflineMode } = useNetwork()

  const [phone, setPhone] = useState<string>("")
  const [password, setPassword] = useState<string>("")
  const [secureTextEntry, setSecureTextEntry] = useState<boolean>(true)
  const [rememberMe, setRememberMe] = useState<boolean>(false)
  const [loading, setLoading] = useState<boolean>(false)
  const [error, setError] = useState<string>("")
  const [visible, setVisible] = useState<boolean>(false)
  const [showOfflineWarning, setShowOfflineWarning] = useState<boolean>(false)
  const [isI18nReady, setIsI18nReady] = useState(i18n.isInitialized)

  // Charger les identifiants sauvegardés
  useEffect(() => {
    const loadSavedCredentials = async (): Promise<void> => {
      try {
        const savedPhone = await AsyncStorage.getItem("savedPhone")
        const savedRememberMe = await AsyncStorage.getItem("rememberMe")

        if (savedPhone && savedRememberMe === "true") {
          setPhone(savedPhone)
          setRememberMe(true)
        }
      } catch (error) {
        console.error("Error loading saved credentials:", error)
      }
    }

    loadSavedCredentials()
  }, [])

  // Vérifier la connectivité
  useEffect(() => {
    if (!isConnected && !isOfflineMode) {
      setShowOfflineWarning(true)
    } else {
      setShowOfflineWarning(false)
    }
  }, [isConnected, isOfflineMode])

  useEffect(() => {
    if (!i18n.isInitialized) {
      i18n.on("initialized", () => setIsI18nReady(true))
    }
  }, [])

  if (!isI18nReady) {
    return (
      <View style={{flex:1,justifyContent:'center',alignItems:'center'}}>
        <Text>Chargement...</Text>
      </View>
    );
  }

  const handleLogin = async (): Promise<void> => {
    if (phone.trim() === "" || password.trim() === "") {
      setError(t("login.errorRequiredFields"))
      setVisible(true)
      return
    }

    setLoading(true)
    try {
      // Sauvegarder les identifiants si "Se souvenir de moi" est coché
      if (rememberMe) {
        await AsyncStorage.setItem("savedPhone", phone)
        await AsyncStorage.setItem("rememberMe", "true")
      } else {
        await AsyncStorage.removeItem("savedPhone")
        await AsyncStorage.removeItem("rememberMe")
      }

      // Connexion
      await signIn(phone, password)
    } catch (error) {
      console.error("Login error:", error)
      setError(error instanceof Error ? error.message : t("login.errorGeneric"))
      setVisible(true)
    } finally {
      setLoading(false)
    }
  }

  const handleOfflineMode = (): void => {
    toggleOfflineMode(true)
    setShowOfflineWarning(false)
  }

  return (
    <KeyboardAvoidingView behavior={Platform.OS === "ios" ? "padding" : "height"} style={styles.container}>
      <ScrollView contentContainerStyle={styles.scrollContainer}>
        <View style={styles.illustrationContainer}>
          <LoginConnexionSvg width={180} height={140} />
        </View>
        <View style={styles.formContainer}>
          <Text style={styles.title}>Login</Text>
          <Text style={styles.subtitle}>Sign to your account</Text>

          <View style={styles.inputLabelContainer}>
            <Text style={styles.inputLabel}>Your Email</Text>
          </View>
          <TextInput
            label={" "}
            value={phone}
            onChangeText={setPhone}
            style={styles.input}
            keyboardType="email-address"
            left={<TextInput.Icon icon="email" color="#BDBDBD" />}
            mode="flat"
            placeholder="enas@gmail.com"
            underlineColor="transparent"
            activeUnderlineColor="transparent"
            theme={{ colors: { background: '#F5F5F5' } }}
          />

          <View style={styles.inputLabelContainer}>
            <Text style={styles.inputLabel}>Password</Text>
          </View>
          <TextInput
            label={" "}
            value={password}
            onChangeText={setPassword}
            secureTextEntry={secureTextEntry}
            style={styles.input}
            left={<TextInput.Icon icon="lock" color="#BDBDBD" />}
            right={<TextInput.Icon icon={secureTextEntry ? "eye-off" : "eye"} color="#BDBDBD" onPress={() => setSecureTextEntry(!secureTextEntry)} />}
            mode="flat"
            placeholder="••••••••••"
            underlineColor="transparent"
            activeUnderlineColor="transparent"
            theme={{ colors: { background: '#F5F5F5' } }}
          />

          <TouchableOpacity style={styles.forgotPasswordContainer} onPress={() => navigation.navigate("ForgotPassword")}> 
            <Text style={styles.forgotPassword}>Forgot Password?</Text>
          </TouchableOpacity>

          <Button
            mode="contained"
            onPress={handleLogin}
            style={styles.button}
            labelStyle={styles.buttonLabel}
            contentStyle={styles.buttonContent}
          >
            Login
          </Button>

          <View style={styles.dividerContainer}>
            <View style={styles.divider} />
            <Text style={styles.dividerText}>Or</Text>
            <View style={styles.divider} />
          </View>

          <View style={styles.socialContainer}>
            <TouchableOpacity style={styles.socialButton}>
              <Image source={require('../../assets/google.png')} style={styles.socialIcon} />
            </TouchableOpacity>
            <TouchableOpacity style={styles.socialButton}>
              <Image source={require('../../assets/facebook.png')} style={styles.socialIcon} />
            </TouchableOpacity>
            <TouchableOpacity style={styles.socialButton}>
              <Image source={require('../../assets/apple.png')} style={styles.socialIcon} />
            </TouchableOpacity>
          </View>

          <TouchableOpacity style={styles.noAccountContainer} onPress={() => navigation.navigate("Register")}> 
            <Text style={styles.noAccountText}>I don't have account</Text>
          </TouchableOpacity>
        </View>
        <Snackbar
          visible={visible}
          onDismiss={() => setVisible(false)}
          duration={3000}
          style={styles.snackbar}
          action={{
            label: "OK",
            onPress: () => setVisible(false),
            textColor: "#FFFFFF"
          }}
        >
          {error}
        </Snackbar>
      </ScrollView>
    </KeyboardAvoidingView>
  )
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
  },
  scrollContainer: {
    flexGrow: 1,
    justifyContent: "center",
    padding: 24,
  },
  illustrationContainer: {
    alignItems: "center",
    marginTop: 24,
    marginBottom: 8,
  },
  formContainer: {
    width: "100%",
    backgroundColor: "#fff",
    borderRadius: 0,
    padding: 0,
    marginTop: 0,
    marginBottom: 0,
  },
  title: {
    fontSize: 24,
    fontWeight: "bold",
    color: "#222",
    marginBottom: 2,
    marginTop: 8,
  },
  subtitle: {
    fontSize: 14,
    color: "#9E9E9E",
    marginBottom: 16,
  },
  inputLabelContainer: {
    marginTop: 8,
    marginBottom: 2,
  },
  inputLabel: {
    fontSize: 13,
    color: "#757575",
    marginLeft: 2,
  },
  input: {
    backgroundColor: "#F5F5F5",
    borderRadius: 8,
    fontSize: 15,
    marginBottom: 8,
    borderWidth: 0,
    paddingHorizontal: 0,
    height: 48,
  },
  forgotPasswordContainer: {
    alignSelf: "flex-end",
    marginBottom: 16,
  },
  forgotPassword: {
    color: "#757575",
    fontSize: 13,
    fontWeight: "500",
  },
  button: {
    backgroundColor: "#FF6B00",
    borderRadius: 8,
    marginTop: 0,
    marginBottom: 16,
    height: 48,
    justifyContent: "center",
  },
  buttonLabel: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#fff",
  },
  buttonContent: {
    height: 48,
  },
  dividerContainer: {
    flexDirection: "row",
    alignItems: "center",
    marginVertical: 8,
    marginBottom: 16,
  },
  divider: {
    flex: 1,
    height: 1,
    backgroundColor: "#E0E0E0",
  },
  dividerText: {
    marginHorizontal: 12,
    color: "#757575",
    fontSize: 13,
  },
  socialContainer: {
    flexDirection: "row",
    justifyContent: "center",
    alignItems: "center",
    marginBottom: 16,
  },
  socialButton: {
    width: 44,
    height: 44,
    borderRadius: 22,
    backgroundColor: "#fff",
    borderWidth: 1,
    borderColor: "#E0E0E0",
    justifyContent: "center",
    alignItems: "center",
    marginHorizontal: 8,
  },
  socialIcon: {
    width: 24,
    height: 24,
    resizeMode: "contain",
  },
  noAccountContainer: {
    alignItems: "center",
    marginTop: 8,
  },
  noAccountText: {
    color: "#757575",
    fontSize: 13,
    textDecorationLine: "underline",
  },
  snackbar: {
    backgroundColor: "#323232",
    borderRadius: 8,
    marginBottom: 16,
  },
})

export default LoginScreen