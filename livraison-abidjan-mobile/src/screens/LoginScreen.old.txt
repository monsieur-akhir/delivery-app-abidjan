"use client"

import React, { useState, useEffect } from "react"
import { 
  View, 
  StyleSheet, 
  Image, 
  TouchableOpacity, 
  KeyboardAvoidingView, 
  Platform, 
  ScrollView, 
  Dimensions,
  Animated,
  Easing
} from "react-native"
import { 
  TextInput, 
  Button, 
  Text, 
  Snackbar,
  ActivityIndicator,
  useTheme 
} from "react-native-paper"
import { useAuth } from "../contexts/AuthContext"
import { useTranslation } from "react-i18next"
import i18n from "../i18n"
import LottieView from 'lottie-react-native'
import { MaterialCommunityIcons } from '@expo/vector-icons'

// Configuration responsive
const { width, height } = Dimensions.get('window')
const isTablet = width >= 600
const isSmallDevice = height < 700

const LoginScreen = ({ navigation }) => {
  const theme = useTheme()
  const [credentials, setCredentials] = useState({
    email: "",
    password: ""
  })
  const [formState, setFormState] = useState({
    loading: false,
    errors: {},
    secureText: true,
    snackbar: {
      visible: false,
      message: "",
      type: "error" // 'error' | 'success'
    }
  })
  
  const { signIn } = useAuth()
  const { t } = useTranslation()
  
  // Animations
  const fadeAnim = useState(new Animated.Value(0))[0]
  const slideUpAnim = useState(new Animated.Value(30))[0]
  const logoScale = useState(new Animated.Value(0.8))[0]

  useEffect(() => {
    // Sequence d'animations
    Animated.parallel([
      Animated.timing(fadeAnim, {
        toValue: 1,
        duration: 800,
        useNativeDriver: true
      }),
      Animated.timing(slideUpAnim, {
        toValue: 0,
        duration: 600,
        easing: Easing.out(Easing.cubic),
        useNativeDriver: true
      }),
      Animated.spring(logoScale, {
        toValue: 1,
        friction: 4,
        useNativeDriver: true
      })
    ]).start()
  }, [])

  const handleChange = (name, value) => {
    setCredentials(prev => ({ ...prev, [name]: value }))
    // Clear error when typing
    if (formState.errors[name]) {
      setFormState(prev => ({
        ...prev,
        errors: { ...prev.errors, [name]: null }
      }))
    }
  }

  const validateForm = () => {
    const { email, password } = credentials
    const errors = {}
    let isValid = true

    if (!email.trim()) {
      errors.email = t("validation.emailRequired")
      isValid = false
    } else if (!/\S+@\S+\.\S+/.test(email)) {
      errors.email = t("validation.emailInvalid")
      isValid = false
    }

    if (!password) {
      errors.password = t("validation.passwordRequired")
      isValid = false
    } else if (password.length < 6) {
      errors.password = t("validation.passwordLength")
      isValid = false
    }

    setFormState(prev => ({ ...prev, errors }))
    return isValid
  }

  const handleSubmit = async () => {
    if (!validateForm()) return

    setFormState(prev => ({ ...prev, loading: true }))

    try {
      await signIn(credentials.email, credentials.password)
      
      // Feedback visuel de succès
      setFormState(prev => ({
        ...prev,
        snackbar: {
          visible: true,
          message: t("login.success"),
          type: "success"
        }
      }))
    } catch (error) {
      setFormState(prev => ({
        ...prev,
        snackbar: {
          visible: true,
          message: error.message || t("errors.generic"),
          type: "error"
        }
      }))
    } finally {
      setFormState(prev => ({ ...prev, loading: false }))
    }
  }

  const renderInputIcon = (iconName, error) => (
    <MaterialCommunityIcons 
      name={iconName} 
      size={22} 
      color={error ? theme.colors.error : theme.colors.outline}
      style={{ marginRight: 8 }}
    />
  )

  return (
    <View style={[styles.container, { backgroundColor: theme.colors.background }]}>
      <KeyboardAvoidingView
        behavior={Platform.OS === "ios" ? "padding" : "height"}
        style={styles.keyboardView}
        keyboardVerticalOffset={Platform.select({ ios: 40, android: 20 })}
      >
        <ScrollView
          contentContainerStyle={styles.scrollContainer}
          keyboardShouldPersistTaps="handled"
          showsVerticalScrollIndicator={false}
        >
          {/* Animation d'arrière-plan */}
          <View style={styles.animationBackground}>
            <LottieView
              source={require('../assets/animations/auth-bg.json')}
              autoPlay
              loop
              style={styles.lottieBackground}
            />
          </View>

          <Animated.View style={[
            styles.logoContainer,
            { 
              opacity: fadeAnim,
              transform: [{ scale: logoScale }] 
            }
          ]}>
            <Image
              source={require("../assets/logo.png")}
              style={styles.logo}
              resizeMode="contain"
            />
          </Animated.View>

          <Animated.View style={[
            styles.formContainer,
            { 
              opacity: fadeAnim,
              transform: [{ translateY: slideUpAnim }] 
            }
          ]}>
            <Text variant="headlineMedium" style={styles.title}>
              {t("login.welcome")}
            </Text>
            
            <Text variant="bodyMedium" style={styles.subtitle}>
              {t("login.subtitle")}
            </Text>

            <View style={styles.inputContainer}>
              <TextInput
                label={t("login.email")}
                value={credentials.email}
                onChangeText={(text) => handleChange('email', text)}
                mode="outlined"
                autoCapitalize="none"
                keyboardType="email-address"
                textContentType="emailAddress"
                error={!!formState.errors.email}
                left={renderInputIcon('email', formState.errors.email)}
                theme={{
                  colors: {
                    primary: theme.colors.primary,
                    error: theme.colors.error,
                    background: theme.colors.surfaceVariant
                  },
                  roundness: 12
                }}
                style={styles.input}
              />
              
              {formState.errors.email && (
                <Text style={styles.errorText}>
                  {formState.errors.email}
                </Text>
              )}
            </View>

            <View style={styles.inputContainer}>
              <TextInput
                label={t("login.password")}
                value={credentials.password}
                onChangeText={(text) => handleChange('password', text)}
                mode="outlined"
                secureTextEntry={formState.secureText}
                textContentType="password"
                error={!!formState.errors.password}
                left={renderInputIcon('lock', formState.errors.password)}
                right={
                  <TextInput.Icon 
                    icon={formState.secureText ? "eye-off" : "eye"} 
                    onPress={() => setFormState(prev => ({
                      ...prev,
                      secureText: !prev.secureText
                    }))}
                  />
                }
                theme={{
                  colors: {
                    primary: theme.colors.primary,
                    error: theme.colors.error,
                    background: theme.colors.surfaceVariant
                  },
                  roundness: 12
                }}
                style={styles.input}
              />
              
              {formState.errors.password && (
                <Text style={styles.errorText}>
                  {formState.errors.password}
                </Text>
              )}
            </View>

            <TouchableOpacity
              onPress={() => navigation.navigate("ForgotPassword")}
              style={styles.forgotPassword}
            >
              <Text style={styles.linkText}>
                {t("login.forgotPassword")}
              </Text>
            </TouchableOpacity>

            <Button
              mode="contained"
              onPress={handleSubmit}
              loading={formState.loading}
              disabled={formState.loading}
              style={styles.button}
              labelStyle={styles.buttonLabel}
              contentStyle={styles.buttonContent}
            >
              {!formState.loading && t("login.submit")}
            </Button>

            <View style={styles.footer}>
              <Text style={styles.footerText}>
                {t("login.noAccount")}
              </Text>
              
              <TouchableOpacity
                onPress={() => navigation.navigate("Register")}
              >
                <Text style={styles.linkText}>
                  {t("login.register")}
                </Text>
              </TouchableOpacity>
            </View>
          </Animated.View>
        </ScrollView>
      </KeyboardAvoidingView>

      {/* Snackbar avec animation */}
      <Snackbar
        visible={formState.snackbar.visible}
        onDismiss={() => setFormState(prev => ({
          ...prev,
          snackbar: { ...prev.snackbar, visible: false }
        }))}
        duration={4000}
        style={[
          styles.snackbar,
          { 
            backgroundColor: formState.snackbar.type === 'error' 
              ? theme.colors.errorContainer 
              : theme.colors.primaryContainer
          }
        ]}
        action={{
          label: t("common.close"),
          textColor: formState.snackbar.type === 'error' 
            ? theme.colors.onErrorContainer 
            : theme.colors.onPrimaryContainer
        }}
      >
        <Text style={[
          styles.snackbarText,
          {
            color: formState.snackbar.type === 'error' 
              ? theme.colors.onErrorContainer 
              : theme.colors.onPrimaryContainer
          }
        ]}>
          {formState.snackbar.message}
        </Text>
      </Snackbar>
    </View>
  )
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  keyboardView: {
    flex: 1,
  },
  scrollContainer: {
    flexGrow: 1,
    justifyContent: 'center',
    paddingHorizontal: isTablet ? 48 : 24,
    paddingBottom: 40,
  },
  animationBackground: {
    position: 'absolute',
    width: '100%',
    height: '100%',
    opacity: 0.15,
    zIndex: -1
  },
  lottieBackground: {
    flex: 1
  },
  logoContainer: {
    alignItems: 'center',
    marginBottom: isSmallDevice ? 24 : 40,
  },
  logo: {
    width: isTablet ? 180 : 120,
    height: isTablet ? 180 : 120,
  },
  formContainer: {
    width: '100%',
    maxWidth: 500,
    alignSelf: 'center',
  },
  title: {
    textAlign: 'center',
    marginBottom: 8,
    fontWeight: '700'
  },
  subtitle: {
    textAlign: 'center',
    marginBottom: isSmallDevice ? 24 : 32,
    opacity: 0.8
  },
  inputContainer: {
    marginBottom: 16,
  },
  input: {
    backgroundColor: 'transparent',
  },
  errorText: {
    color: '#EF4444',
    fontSize: 12,
    marginTop: 4,
    marginLeft: 12
  },
  forgotPassword: {
    alignSelf: 'flex-end',
    marginBottom: 16,
  },
  button: {
    borderRadius: 12,
    marginTop: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 6,
    elevation: 3
  },
  buttonContent: {
    height: 50,
  },
  buttonLabel: {
    fontSize: 16,
    fontWeight: '600',
    letterSpacing: 0.5
  },
  footer: {
    flexDirection: 'row',
    justifyContent: 'center',
    marginTop: 24,
    alignItems: 'center',
    flexWrap: 'wrap'
  },
  footerText: {
    opacity: 0.8
  },
  linkText: {
    fontWeight: '600',
    marginLeft: 4,
    color: '#3B82F6'
  },
  snackbar: {
    borderRadius: 12,
    margin: 16,
    elevation: 4
  },
  snackbarText: {
    fontWeight: '500'
  }
})

export default LoginScreen